import Sockette from 'sockette';

export default (opts) => {

  const defaults = {
    name: 'websocket',
    url: null,
    timeout: 5000,
    maxAttempts: 10
  }

  const config = Object.assign({}, defaults, opts);

  return {

    name: config.name,

    getReducer: () => {
      const initialData = {
        ws: null,
        shouldInitialize: true
      }
  
      return (state = initialData, { type, payload }) => {
        switch(type){
          case 'WEBSOCKET_INITIALIZE_STARTED':
          case 'WEBSOCKET_INITIALIZE_FINISHED':
          case 'WEBSOCKET_OPEN':
          case 'WEBSOCKET_MESSAGE':
          case 'WEBSOCKET_CLOSE':
          case 'WEBSOCKET_RECONNECT':
          case 'WEBSOCKET_ERROR':
            return Object.assign({}, state, payload);
          default:
            return state;
        }
      }
    },

    doWebsocketInitialize: () => ({ dispatch, store }) => {
      dispatch({ type: 'WEBSOCKET_INITIALIZE_STARTED', payload: { shouldInitialize: false }});
      const ws = new Sockette(config.url, {
        timeout: config.timeout,
        maxAttempts: config.maxAttempts,
        onopen: store.doWebsocketHandleConnect,
        onmessage: store.doWebsocketHandleMessage,
        onreconnect: store.doWebsocketHandleReconnect,
        onclose: store.doWebsocketHandleClose,
        onerror: store.doWebsocketHandleError,
        onmaximum: store.doWebsocketHandleMaximum
      });
      dispatch({ type: 'WEBSOCKET_INITIALIZE_FINISHED', payload: { ws: ws }});
    },

    doWebsocketHandleConnect: (e) => ({ dispatch, store }) => {
      dispatch({ type: 'WEBSOCKET_OPEN', payload: {e: e}});
    },

    doWebsocketHandleMessage: (e) => ({ dispatch, store }) => {
      dispatch({ type: 'WEBSOCKET_MESSAGE', payload: {e: e}});
    },

    doWebsocketHandleClose: (e) => ({ dispatch, store }) => {
      dispatch({ type: 'WEBSOCKET_CLOSE', payload: {e: e}});
    },

    doWebsocketHandleReconnect: (e) => ({ dispatch, store }) => {
      dispatch({ type: 'WEBSOCKET_RECONNECT', payload: {e: e}});
    },

    doWebsocketHandleError: (e) => ({ dispatch, store }) => {
      dispatch({ type: 'WEBSOCKET_ERROR', payload: {e: e}});
    },

    doWebsocketHandleMaximum: (e) => ({ dispatch, store }) => {
      dispatch({ type: 'WEBSOCKET_MAXIMUM_REACHED', payload: {e: e}});
    },

    doWebsocketSendMessage: (msg) => ({ dispatch, store }) => {
      // @TODO, make this better
      const ws = store.selectWebsocket();
      if(typeof msg === 'object') return ws.json(msg);
      ws.send(msg);
    },

    selectWebsocket: (state) => {
      return state.websocket.ws;
    },

    reactWebsocketShouldInitialize: (state) => {
      if(state.websocket.shouldInitialize) return { actionCreator: 'doWebsocketInitialize' };
    }
  }
}