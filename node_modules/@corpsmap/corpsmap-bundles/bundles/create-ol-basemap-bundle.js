import basemaps from '../config/basemaps';
import { getLayer, getSource } from '../utils/layer-utils';
import { createSelector } from 'redux-bundler';

export default (opts) => {

  const defaults = {
    name: 'basemaps',
    basemaps: basemaps,
    activeIdx: 0
  }

  const config = Object.assign({}, defaults, opts);

  return {
    name: config.name,

    getReducer: () => {
      const initialState = {
        lyr: null,
        src: null,
        basemaps: config.basemaps,
        activeIdx: config.activeIdx,
        shouldCreateBasemapLayer: true,
        shouldSetBasemap: false
      }
  
      return (state = initialState, { type, payload }) => {
        switch(type){
          case 'BASEMAP_CHANGED':
          case 'BASEMAP_SET_STARTED':
          case 'BASEMAP_SET_FINISHED':
          case 'BASEMAP_CREATE_LAYER_STARTED':
          case 'BASEMAP_CREATE_LAYER_FINISHED':
            return Object.assign({}, state, payload);
          case 'MAP_INITIALIZED':
            return Object.assign({}, state, { shouldSetBasemap: true });
          default: 
            return state;
        }
      }
    },

    doBasemapsChange: (idx) => ({ dispatch }) => {
      dispatch({ type: 'BASEMAP_CHANGED', payload: { shouldSetBasemap: true, activeIdx: idx }});
    },

    doBasemapsSet: () => ({ dispatch, store }) => {
      dispatch({ type: 'BASEMAP_SET_STARTED', payload: { shouldSetBasemap: false }});
      const map = store.selectMap();
      const lyr = store.selectBasemapsLayer();
      const config = store.selectBasemapsConfig();
      const src = getSource(config);
      map.removeLayer(lyr);
      lyr.setSource(src);
      map.getLayers().insertAt(0, lyr);
      dispatch({ type: 'BASEMAP_SET_FINISHED', payload: { src: src }});
    },

    doBasemapsCreateLayer: () => ({ dispatch }) => {
      dispatch({ type: 'BASEMAP_CREATE_LAYER_STARTED', payload: { shouldCreateBasemapLayer: false }});
      const lyr = getLayer({ serviceType: 'XYZ', visible: true });
      dispatch({ type: 'BASEMAP_CREATE_LAYER_FINISHED', payload: { lyr: lyr }});
    },

    selectBasemapsConfig: createSelector(
      'selectBasemapsActiveIdx',
      'selectBasemaps',
      (idx, basemaps) => {
        return basemaps[idx];
      }
    ),

    selectBasemapsActiveIdx: (state) => {
      return state.basemaps.activeIdx;
    },

    selectBasemaps: (state) => {
      return state.basemaps.basemaps;
    },

    selectBasemapsLayer: (state) => {
      return state.basemaps.lyr;
    },

    reactBasemapsShouldCreateLayer: (state) => {
      if(state.basemaps.shouldCreateBasemapLayer) return { actionCreator: 'doBasemapsCreateLayer' };
    },

    reactShouldSetBasemap: (state) => {
      if(state.basemaps.shouldSetBasemap) return { actionCreator: 'doBasemapsSet' };
    }
  }
  
}