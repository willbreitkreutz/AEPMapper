import { debounce } from 'lodash';

export default (opts) => {

  const defaults = {
    name: 'fileDrop',
    wait: 200
  }

  const config = Object.assign({}, defaults, opts);

  const uCaseName = config.name.charAt(0).toUpperCase() + config.name.slice(1);
  const baseType = config.name.toUpperCase();

  const doRegisterDropTarget = `do${baseType}RegisterDropTarget`;
  const doHandleDragEvent = `do${baseType}HandleDragEvent`;
  const doHandleDrop = `do${baseType}HandleDrop`;
  
  return {
    name: config.name,

    getReducer: () => {
      const initialData = {
        wait: config.wait
      }

      return (state = initialData, { type, payload }) => {
        return state;
      }
    },

    [doHandleDragEvent]: (e, target) => ({ dispatch, store }) => {
      if(!e.type) return;
      const type = e.type.toUpperCase();
      dispatch({ 
        type: `${uCaseName}_${type}_FIRED`,
        payload: {
          e: e,
          target: target
        }
      })
    },

    [doHandleDrop]: (e, target, onDrop) => ({ dispatch, store }) => {
      if(!e.type) return;
      const files = [];
      if(e.dataTransfer.items){
        e.dataTransfer.items.forEach((item) => {
          if(item.kind === 'file'){
            files.push(item.getAsFile());
          }
        })
      }else if(e.dataTransfer.files){
        e.dataTransfer.files.forEach((file) => {
          files.push(file);
        })
      }

      dispatch({ 
        type: `${uCaseName}_DROP_FIRED`,
        payload: {
          e: e,
          target: target,
          files: files
        }
      })

      if(onDrop && typeof onDrop === 'function') onDrop({
        e: e,
        target: target,
        files: files
      })
    },

    [doRegisterDropTarget]: ( target, onDrop ) => ({ store }) => {
      const handleEvent = (e) => {
        e.preventDefault();
        store[doHandleDragEvent](e, target);
      }
      const handleEventDebounced = debounce(handleEvent, config.wait);
      const handleDrop = (e) => {
        e.preventDefault();
        store[doHandleDrop](e, target, onDrop);
      }

      target.addEventListener('drag', handleEventDebounced);
      target.addEventListener('dragover', handleEventDebounced);
      target.addEventListener('dragend', handleEvent);
      target.addEventListener('dragenter', handleEvent);
      target.addEventListener('dragexit', handleEvent);
      target.addEventListener('dragleave', handleEvent);
      target.addEventListener('dragstart', handleEvent);
      target.addEventListener('drop', handleDrop);

      const cleanUp = () => {
        target.removeEventListener('drag', handleEventDebounced);
        target.removeEventListener('dragover', handleEventDebounced);
        target.removeEventListener('dragend', handleEvent);
        target.removeEventListener('dragenter', handleEvent);
        target.removeEventListener('dragexit', handleEvent);
        target.removeEventListener('dragleave', handleEvent);
        target.removeEventListener('dragstart', handleEvent);
        target.removeEventListener('drop', handleDrop);
      }

      return cleanUp;
    }
  }
}