import xhr from 'xhr';

export default (opts) => {

  const defaults = {
    name: 'api',
    root: ''
  }

  const config = Object.assign({}, defaults, opts);

  return {
    
    name: config.name,

    getReducer: () => {
      const initialData = {
        root: config.root
      }

      return (state = initialData, { type, payload }) => {
        return state;
      }
    },

    selectApiRoot: (state) => {
      return state.api.root;
    },

    getExtraArgs: (store) => {
      return {

        anonGet: (path, callback) => {
          const root = store.selectApiRoot();
          const options = {
            url: `${root}${path}`
          }
          xhr.get(options, callback);
        },

        apiGet: (path, callback) => {
          const token = store.selectAuthTokenRaw();
          if(!token) return null;
          const root = store.selectApiRoot();
          const options = {
            url: `${root}${path}`
          }
          if(token){
            options.headers = {
              Authorization: "Bearer " + token
            }
          }
          xhr.get(options, callback);
        },

        apiPut: (path, payload, callback) => {
          const token = store.selectAuthTokenRaw();
          if(!token) return null;
          const root = store.selectApiRoot();
          const options = {
            url: `${root}${path}`,
            json: payload
          }
          if(token){
            options.headers = {
              Authorization: "Bearer " + token
            }
          }
          xhr.put(options, callback);
        },

        apiPost: (path, payload, callback) => {
          const token = store.selectAuthTokenRaw();
          if(!token) return null;
          const root = store.selectApiRoot();
          const options = {
            url: `${root}${path}`,
            json: payload
          }
          if(token){
            options.headers = {
              Authorization: "Bearer " + token
            }
          }
          xhr.post(options, callback);
        },

        apiDelete: (path, callback) => {
          const token = store.selectAuthTokenRaw();
          if(!token) return null;
          const root = store.selectApiRoot();
          const options = {
            url: `${root}${path}`
          }
          if(token){
            options.headers = {
              Authorization: "Bearer " + token
            }
          }
          xhr.del(options, callback)
        }
      }
    }
  }
}