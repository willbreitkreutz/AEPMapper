{"ast":null,"code":"import VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Circle from 'ol/style/Circle';\nexport default {\n  name: 'collab',\n  getReducer: () => {\n    const initialData = {\n      layer: null,\n      shouldInitalize: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'COLLAB_INITIALIZE_STARTED':\n        case 'COLLAB_INITIALIZE_FINISHED':\n          return Object.assign({}, state, payload);\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doCollabInitialize: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'COLLAB_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap();\n    const source = new VectorSource();\n    const layer = new VectorLayer({\n      source: source,\n      style: new Style({\n        fill: new Fill({\n          color: \"rgba( 66,232,244,.5)\"\n        }),\n        stroke: new Stroke({\n          width: 3,\n          color: \"rgba( 66,232,244,.5)\"\n        }),\n        image: new Circle({\n          radius: 7,\n          fill: new Fill({\n            color: \"rgba( 66,232,244,.5)\"\n          }),\n          stroke: new Stroke({\n            width: 3,\n            color: \"rgba( 66,232,244,.5)\"\n          })\n        })\n      })\n    });\n    map.addLayer(layer);\n    dispatch({\n      type: 'COLLAB_INITIALIZE_FINISHED',\n      payload: {\n        layer: layer\n      }\n    });\n  },\n  selectCollabLayer: state => {\n    return state.collab.layer;\n  },\n  reactCollabShouldInitialize: state => {\n    if (state.collab.shouldInitalize) return {\n      actionCreator: 'doCollabInitialize'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\collab-bundle.js"],"names":["VectorLayer","VectorSource","Style","Fill","Stroke","Circle","name","getReducer","initialData","layer","shouldInitalize","state","type","payload","Object","assign","doCollabInitialize","dispatch","store","map","selectMap","source","style","fill","color","stroke","width","image","radius","addLayer","selectCollabLayer","collab","reactCollabShouldInitialize","actionCreator"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,eAAc;AACVC,EAAAA,IAAI,EAAE,QADI;AAEVC,EAAAA,UAAU,EAAC,MAAI;AACX,UAAMC,WAAW,GAAG;AAChBC,MAAAA,KAAK,EAAE,IADS;AAEhBC,MAAAA,eAAe,EAAE;AAFD,KAApB;AAIA,WAAO,CAACC,KAAK,GAAGH,WAAT,EAAsB;AAACI,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAtB,KAAwC;AAC3C,cAAOD,IAAP;AACI,aAAI,2BAAJ;AACA,aAAI,4BAAJ;AACI,iBAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACJ,aAAK,iBAAL;AACI,iBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC5BD,YAAAA,eAAe,EAAE;AADW,WAAzB,CAAP;;AAGJ;AACI,iBAAOC,KAAP;AATR;AAWH,KAZD;AAaH,GApBS;AAqBVK,EAAAA,kBAAkB,EAAE,MAAM,CAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAD,KAAuB;AACjDD,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE,2BAAP;AAAoCC,MAAAA,OAAO,EAAE;AAACH,QAAAA,eAAe,EAAE;AAAlB;AAA7C,KAAD,CAAR;AACA,UAAMS,GAAG,GAAGD,KAAK,CAACE,SAAN,EAAZ;AACA,UAAMC,MAAM,GAAG,IAAIpB,YAAJ,EAAf;AACA,UAAMQ,KAAK,GAAG,IAAIT,WAAJ,CAAgB;AAC1BqB,MAAAA,MAAM,EAAEA,MADkB;AAE1BC,MAAAA,KAAK,EAAE,IAAIpB,KAAJ,CAAU;AACbqB,QAAAA,IAAI,EAAE,IAAIpB,IAAJ,CAAS;AACXqB,UAAAA,KAAK;AADM,SAAT,CADO;AAIbC,QAAAA,MAAM,EAAE,IAAIrB,MAAJ,CAAW;AACfsB,UAAAA,KAAK,EAAE,CADQ;AAEfF,UAAAA,KAAK;AAFU,SAAX,CAJK;AAQbG,QAAAA,KAAK,EAAE,IAAItB,MAAJ,CAAW;AACduB,UAAAA,MAAM,EAAE,CADM;AAEdL,UAAAA,IAAI,EAAE,IAAIpB,IAAJ,CAAS;AACXqB,YAAAA,KAAK;AADM,WAAT,CAFQ;AAKdC,UAAAA,MAAM,EAAE,IAAIrB,MAAJ,CAAW;AACfsB,YAAAA,KAAK,EAAE,CADQ;AAEfF,YAAAA,KAAK;AAFU,WAAX;AALM,SAAX;AARM,OAAV;AAFmB,KAAhB,CAAd;AAsBAL,IAAAA,GAAG,CAACU,QAAJ,CAAapB,KAAb;AACAQ,IAAAA,QAAQ,CAAC;AACLL,MAAAA,IAAI,EAAE,4BADD;AAELC,MAAAA,OAAO,EAAC;AACJJ,QAAAA,KAAK,EAAEA;AADH;AAFH,KAAD,CAAR;AAMH,GAtDa;AAuDdqB,EAAAA,iBAAiB,EAAGnB,KAAD,IAAW;AAC1B,WAAOA,KAAK,CAACoB,MAAN,CAAatB,KAApB;AACH,GAzDa;AA0DduB,EAAAA,2BAA2B,EAAGrB,KAAD,IAAW;AACpC,QAAGA,KAAK,CAACoB,MAAN,CAAarB,eAAhB,EAAiC,OAAO;AAAEuB,MAAAA,aAAa,EAAE;AAAjB,KAAP;AACpC;AA5Da,CAAd","sourcesContent":["import VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Circle from 'ol/style/Circle';\r\n\r\nexport default{\r\n    name: 'collab',\r\n    getReducer:()=>{\r\n        const initialData = {\r\n            layer: null,\r\n            shouldInitalize: false\r\n        }\r\n        return (state = initialData, {type, payload})=>{\r\n            switch(type){\r\n                case'COLLAB_INITIALIZE_STARTED':\r\n                case'COLLAB_INITIALIZE_FINISHED':\r\n                    return Object.assign({}, state, payload)\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state\r\n            }\r\n        }\r\n    },    \r\n    doCollabInitialize: () => ({dispatch, store}) => {\r\n    dispatch({type: 'COLLAB_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n    const map = store.selectMap();\r\n    const source = new VectorSource();\r\n    const layer = new VectorLayer({\r\n        source: source,\r\n        style: new Style({\r\n            fill: new Fill({\r\n                color: `rgba( 66,232,244,.5)`\r\n            }),\r\n            stroke: new Stroke({\r\n                width: 3,\r\n                color: `rgba( 66,232,244,.5)`\r\n            }),\r\n            image: new Circle({\r\n                radius: 7,\r\n                fill: new Fill({\r\n                    color: `rgba( 66,232,244,.5)`\r\n                }),\r\n                stroke: new Stroke({\r\n                    width: 3,\r\n                    color: `rgba( 66,232,244,.5)`\r\n                })\r\n            })\r\n        })\r\n    })\r\n    map.addLayer(layer);\r\n    dispatch({\r\n        type: 'COLLAB_INITIALIZE_FINISHED',\r\n        payload:{\r\n            layer: layer,\r\n        }\r\n    })\r\n},\r\nselectCollabLayer: (state) => {\r\n    return state.collab.layer;\r\n},\r\nreactCollabShouldInitialize: (state) => {\r\n    if(state.collab.shouldInitalize) return { actionCreator: 'doCollabInitialize'}\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}