{"ast":null,"code":"/**\n * @module ol/layer/Image\n */\nimport LayerType from '../LayerType.js';\nimport Layer from './Layer.js';\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {import(\"../source/Image.js\").default} [source] Source for this layer.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\n\nvar ImageLayer =\n/*@__PURE__*/\nfunction (Layer) {\n  function ImageLayer(opt_options) {\n    var options = opt_options ? opt_options : {};\n    Layer.call(this, options);\n    /**\n     * The layer type.\n     * @protected\n     * @type {import(\"../LayerType.js\").default}\n     */\n\n    this.type = LayerType.IMAGE;\n  }\n\n  if (Layer) ImageLayer.__proto__ = Layer;\n  ImageLayer.prototype = Object.create(Layer && Layer.prototype);\n  ImageLayer.prototype.constructor = ImageLayer;\n  return ImageLayer;\n}(Layer);\n/**\n * Return the associated {@link module:ol/source/Image source} of the image layer.\n * @function\n * @return {import(\"../source/Image.js\").default} Source.\n * @api\n */\n\n\nImageLayer.prototype.getSource;\nexport default ImageLayer;","map":null,"metadata":{},"sourceType":"module"}