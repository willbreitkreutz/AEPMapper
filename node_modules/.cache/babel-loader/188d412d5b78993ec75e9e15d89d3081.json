{"ast":null,"code":"import VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nimport Modify from 'ol/interaction/Modify';\nimport Select from 'ol/interaction/Select';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport { transform } from 'ol/proj';\nimport GeoJSON from 'ol/format/GeoJSON';\nconst geoJSON = new GeoJSON();\nimport census from 'citysdk';\nexport default {\n  name: 'draw',\n  getReducer: () => {\n    const initialData = {\n      layer: null,\n      shouldInitalize: false,\n      drawPolygons: null,\n      modify: null,\n      select: null,\n      fillColor: \"rgba(249, 4, 4,.5)\",\n      strokeColor: \"rgba(249, 4, 4,.9)\",\n      strokeWidth: 3,\n      activeInteraction: null\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_INITIALIZE_STARTED':\n        case 'DRAW_INITIALIZE_FINISHED':\n        case 'DRAW_ADD_INTERACTION':\n          return Object.assign({}, state, payload);\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawInitializeLayer: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'DRAW_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap();\n    map.on('click', e => {\n      var coord = transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');\n      census({\n        \"vintage\": 2015,\n        // required\n        \"geoHierarchy\": {\n          // required\n          \"county\": {\n            \"lat\": coord[1],\n            \"lng\": coord[0]\n          }\n        }\n      }, (err, res) => {\n        census({\n          \"vintage\": \"2015\",\n          \"geoHierarchy\": {\n            \"state\": res.geoHierarchy.state,\n            \"county\": res.geoHierarchy.county\n          },\n          \"sourcePath\": [\"acs\", \"acs5\"],\n          \"values\": [\"B19083_001E\"],\n          // GINI index             \n          \"statsKey\": \"a6db60fcc5d6bb18e9e3645ecfdd5dbee62a7c63\",\n          \"geoResolution\": \"500k\"\n        }, (err, res) => console.log(res));\n      });\n    });\n    const styleSettings = store.selectDrawStyleSettings();\n    const source = new VectorSource(); //source.on('addfeature', store.doDrawDataHandleAdd);\n    //source.on('removefeature', store.doDrawDataHandleRemove);\n    //source.on('changefeature', debounce(store.doDrawDataHandleChange,200));\n\n    const layer = new VectorLayer({\n      source: source,\n      zIndex: 10,\n      style: new Style({\n        fill: new Fill({\n          color: styleSettings.fillColor\n        }),\n        stroke: new Stroke({\n          width: styleSettings.strokeWidth,\n          color: styleSettings.strokeColor\n        })\n      })\n    });\n    const drawPolygons = new Draw({\n      source: source,\n      type: 'Polygon'\n    });\n    const modify = new Modify({\n      source: source\n    });\n    const select = new Select({\n      layers: [layer]\n    });\n    map.addLayer(layer); //map.addInteraction(modify);\n\n    map.on('click', e => {\n      var coord = transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');\n      census({\n        \"vintage\": 2015,\n        // required\n        \"geoHierarchy\": {\n          // required\n          \"county\": {\n            \"lat\": coord[1],\n            \"lng\": coord[0]\n          }\n        }\n      }, (err, res) => {\n        census({\n          \"vintage\": \"2015\",\n          \"geoHierarchy\": {\n            \"state\": res.geoHierarchy.state,\n            \"county\": res.geoHierarchy.county\n          },\n          \"sourcePath\": [\"acs\", \"acs5\"],\n          \"values\": [\"B19083_001E\"],\n          // GINI index             \n          \"statsKey\": \"a6db60fcc5d6bb18e9e3645ecfdd5dbee62a7c63\",\n          \"geoResolution\": \"500k\"\n        }, (err, res) => {\n          const source = layer.getSource();\n          const features = geoJSON.readFeatures(res);\n          source.addFeatures(features);\n        });\n      });\n    });\n    dispatch({\n      type: 'DRAW_INITIALIZE_FINISHED',\n      payload: {\n        layer: layer,\n        drawPolygons: drawPolygons,\n        modify: modify,\n        select: select\n      }\n    });\n  },\n  doDrawAddInteraction: interaction => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap();\n    const select = store.selectDrawSelect();\n    select.getFeatures().clear();\n    const activeInteraction = store.selectDrawActiveInteraction();\n    let newInteraction = null;\n    map.removeInteraction(activeInteraction);\n\n    if (interaction !== activeInteraction) {\n      map.addInteraction(interaction);\n      newInteraction = interaction;\n    }\n\n    dispatch({\n      type: 'DRAW_ADD_INTERACTION',\n      payload: {\n        activeInteraction: newInteraction\n      }\n    });\n  },\n  doDrawDeleteSelectedFeatures: () => ({\n    dispatch,\n    store\n  }) => {\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource();\n    const select = store.selectDrawSelect();\n    const features = select.getFeatures();\n    features.forEach(feature => {\n      source.removeFeature(feature);\n    });\n    features.clear();\n  },\n  selectDrawLayer: state => {\n    return state.draw.layer;\n  },\n  selectDrawPolygons: state => {\n    return state.draw.drawPolygons;\n  },\n  selectModify: state => {\n    return state.draw.modify;\n  },\n  selectDrawSelect: state => {\n    return state.draw.select;\n  },\n  selectDrawActiveInteraction: state => {\n    return state.draw.activeInteraction;\n  },\n  selectDrawStyleSettings: state => {\n    return {\n      fillColor: state.draw.fillColor,\n      strokeColor: state.draw.strokeColor,\n      strokeWidth: state.draw.strokeWidth\n    };\n  },\n  reactDrawShouldInitialize: state => {\n    if (state.draw.shouldInitalize) return {\n      actionCreator: 'doDrawInitializeLayer'\n    };\n  },\n  init: store => {\n    window.addEventListener('keyup', e => {\n      if (e.keyCode === 8 || e.keyCode === 46) {\n        store.doDrawDeleteSelectedFeatures();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\nsifrontend\\src\\app-bundles\\draw-bundle.js"],"names":["VectorLayer","VectorSource","Draw","Modify","Select","Style","Fill","Stroke","transform","GeoJSON","geoJSON","census","name","getReducer","initialData","layer","shouldInitalize","drawPolygons","modify","select","fillColor","strokeColor","strokeWidth","activeInteraction","state","type","payload","Object","assign","doDrawInitializeLayer","dispatch","store","map","selectMap","on","e","coord","coordinate","err","res","geoHierarchy","county","console","log","styleSettings","selectDrawStyleSettings","source","zIndex","style","fill","color","stroke","width","layers","addLayer","getSource","features","readFeatures","addFeatures","doDrawAddInteraction","interaction","selectDrawSelect","getFeatures","clear","selectDrawActiveInteraction","newInteraction","removeInteraction","addInteraction","doDrawDeleteSelectedFeatures","selectDrawLayer","forEach","feature","removeFeature","draw","selectDrawPolygons","selectModify","reactDrawShouldInitialize","actionCreator","init","window","addEventListener","keyCode"],"mappings":"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","sourcesContent":["import VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport Modify from 'ol/interaction/Modify';\r\nimport Select from 'ol/interaction/Select';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport {transform} from 'ol/proj'\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nconst geoJSON = new GeoJSON();\r\nimport census from 'citysdk'\r\n\r\nexport default {\r\n    name: 'draw',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            layer: null,\r\n            shouldInitalize: false,\r\n            drawPolygons: null,\r\n            modify:null,\r\n            select:null,\r\n            fillColor:`rgba(249, 4, 4,.5)`,\r\n            strokeColor:`rgba(249, 4, 4,.9)`,\r\n            strokeWidth:3,\r\n            activeInteraction: null\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_INITIALIZE_STARTED':\r\n                case 'DRAW_INITIALIZE_FINISHED':\r\n                case 'DRAW_ADD_INTERACTION':\r\n                    return Object.assign({}, state, payload);\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawInitializeLayer: () => ({dispatch, store}) => {\r\n        dispatch({type: 'DRAW_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n        const map = store.selectMap();\r\n        \r\n        map.on('click',(e)=>{\r\n            var coord = transform(e.coordinate,'EPSG:3857','EPSG:4326')\r\n            census({\r\n                \"vintage\" : 2015,    // required\r\n                \"geoHierarchy\" : {   // required\r\n                  \"county\" : {\r\n                    \"lat\" : coord[1], \r\n                    \"lng\" : coord[0]\r\n                  }\r\n                }\r\n              }, \r\n              (err, res) => {\r\n                census({\r\n                    \"vintage\" : \"2015\",\r\n                    \"geoHierarchy\" : {\r\n                        \"state\": res.geoHierarchy.state,\r\n                      \"county\": res.geoHierarchy.county\r\n                    },\r\n                    \"sourcePath\" : [\"acs\", \"acs5\"],  \r\n                    \"values\" : [\"B19083_001E\"],    // GINI index             \r\n                    \"statsKey\" : \"a6db60fcc5d6bb18e9e3645ecfdd5dbee62a7c63\",\r\n                    \"geoResolution\" : \"500k\"\r\n                  },\r\n                  (err, res) => console.log(res)\r\n                )\r\n              }\r\n\r\n            )\r\n            })\r\n        const styleSettings = store.selectDrawStyleSettings();\r\n        const source = new VectorSource();\r\n        //source.on('addfeature', store.doDrawDataHandleAdd);\r\n        //source.on('removefeature', store.doDrawDataHandleRemove);\r\n        //source.on('changefeature', debounce(store.doDrawDataHandleChange,200));\r\n        const layer = new VectorLayer({\r\n            source: source,\r\n            zIndex: 10,\r\n            style: new Style({\r\n                fill: new Fill({\r\n                    color: styleSettings.fillColor\r\n                }),\r\n                stroke: new Stroke({\r\n                    width: styleSettings.strokeWidth,\r\n                    color: styleSettings.strokeColor\r\n                })\r\n            })\r\n        })\r\n        const drawPolygons = new Draw({\r\n            source: source,\r\n            type: 'Polygon'\r\n        })\r\n        const modify = new Modify({\r\n            source: source\r\n        })\r\n        const select = new Select({\r\n            layers: [layer]\r\n        })\r\n        map.addLayer(layer);\r\n        //map.addInteraction(modify);\r\n        map.on('click',(e)=>{\r\n            var coord = transform(e.coordinate,'EPSG:3857','EPSG:4326')\r\n            census({\r\n                \"vintage\" : 2015,    // required\r\n                \"geoHierarchy\" : {   // required\r\n                  \"county\" : {\r\n                    \"lat\" : coord[1], \r\n                    \"lng\" : coord[0]\r\n                  }\r\n                }\r\n              }, \r\n              (err, res) => {\r\n                census({\r\n                    \"vintage\" : \"2015\",\r\n                    \"geoHierarchy\" : {\r\n                        \"state\": res.geoHierarchy.state,\r\n                      \"county\": res.geoHierarchy.county\r\n                    },\r\n                    \"sourcePath\" : [\"acs\", \"acs5\"],  \r\n                    \"values\" : [\"B19083_001E\"],    // GINI index             \r\n                    \"statsKey\" : \"a6db60fcc5d6bb18e9e3645ecfdd5dbee62a7c63\",\r\n                    \"geoResolution\" : \"500k\"\r\n                  },\r\n                  (err, res) => {\r\n                    const source = layer.getSource();\r\n                    const features = geoJSON.readFeatures(res);\r\n                    source.addFeatures(features);\r\n                  }\r\n                )\r\n              }\r\n\r\n            )\r\n            })\r\n        dispatch({\r\n            type: 'DRAW_INITIALIZE_FINISHED',\r\n            payload:{\r\n                layer: layer,\r\n                drawPolygons: drawPolygons,\r\n                modify: modify,\r\n                select: select\r\n            }\r\n        })\r\n    },\r\n    doDrawAddInteraction: (interaction) => ({dispatch, store}) =>{\r\n        const map = store.selectMap();\r\n        const select = store.selectDrawSelect();\r\n        select.getFeatures().clear();\r\n        const activeInteraction = store.selectDrawActiveInteraction();\r\n        let newInteraction = null;\r\n        map.removeInteraction(activeInteraction)\r\n        if(interaction!==activeInteraction){\r\n            map.addInteraction(interaction);\r\n            newInteraction = interaction;\r\n        } \r\n        dispatch({\r\n            type: 'DRAW_ADD_INTERACTION',\r\n            payload:{\r\n                activeInteraction: newInteraction\r\n            }\r\n        })\r\n    },\r\n    doDrawDeleteSelectedFeatures:() =>({dispatch, store}) =>{\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n        const select = store.selectDrawSelect();\r\n        const features = select.getFeatures();\r\n        features.forEach((feature)=>{\r\n            source.removeFeature(feature);\r\n        })\r\n        features.clear();\r\n    },\r\n\r\n    selectDrawLayer: (state) => {\r\n        return state.draw.layer;\r\n    },\r\n    selectDrawPolygons: (state) =>{\r\n        return state.draw.drawPolygons;\r\n    },\r\n    selectModify: (state) => {\r\n        return state.draw.modify;\r\n    },\r\n    selectDrawSelect: (state) => {\r\n        return state.draw.select;\r\n    },\r\n    selectDrawActiveInteraction: (state) => {\r\n        return state.draw.activeInteraction;\r\n    },\r\n    selectDrawStyleSettings:(state) =>{\r\n        return {\r\n            fillColor: state.draw.fillColor,\r\n            strokeColor: state.draw.strokeColor,\r\n            strokeWidth:state.draw.strokeWidth,\r\n        }\r\n\r\n    },\r\n    reactDrawShouldInitialize: (state) => {\r\n        if(state.draw.shouldInitalize) return { actionCreator: 'doDrawInitializeLayer'}\r\n    },\r\n    init: (store) =>{\r\n        window.addEventListener('keyup', (e) =>{\r\n            if(e.keyCode === 8 || e.keyCode === 46){\r\n                store.doDrawDeleteSelectedFeatures();\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}