{"ast":null,"code":"import { transform } from 'ol/proj';\nimport census from 'citysdk';\nimport GeoJSON from 'ol/format/GeoJSON';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'selectByFips',\n  getReducer: () => {\n    const initialData = {\n      selectByFipsIsActive: false,\n      statesAvailable: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'SELECT_BY_FIPS_ACTIVATED':\n        case 'SELECT_BY_FIPS_DEACTIVATED':\n        case 'STATES_AVAILABLE':\n          return Object.assign({}, state, payload);\n\n        case 'SELECT_BY_FIPS_STARTED':\n        case 'SELECT_BY_FIPS_GET_FIPS':\n        case 'SELECT_BY_FIPS_GET_STATS':\n        case 'SELECT_BY_FIPS_FINISHED':\n        default:\n          return state;\n      }\n    };\n  },\n  doSelectByFips: e => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: \"SELECT_BY_FIPS_STARTED\"\n    });\n    var statsKeyStore = store.selectCitysdkStatsKey();\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource();\n    var coord = transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');\n    var coordOut = false;\n\n    const pointInPoly = x => !x.getGeometry().intersectsCoordinate(e.coordinate);\n\n    if (source.getFeatures().length != 0) {\n      if (source.getFeatures().every(pointInPoly)) {} else {\n        coordOut = true;\n      }\n    }\n\n    if (!coordOut) {\n      dispatch({\n        type: \"SELECT_BY_FIPS_GET_FIPS\"\n      });\n      census({\n        \"vintage\": 2015,\n        // required\n        \"geoHierarchy\": {\n          // required\n          \"state\": {\n            \"lat\": coord[1],\n            \"lng\": coord[0]\n          }\n        }\n      }, (err, res) => {\n        if (err) {} else {\n          dispatch({\n            type: 'SELECT_BY_FIPS_STARTED'\n          });\n          census({\n            \"vintage\": \"2015\",\n            \"geoHierarchy\": {\n              \"state\": res.geoHierarchy.state\n            },\n            \"sourcePath\": [\"acs\", \"acs5\"],\n            \"values\": [\"B19083_001E\"],\n            // GINI index             \n            \"statsKey\": statsKeyStore,\n            \"geoResolution\": \"5m\"\n          }, (err, res) => {\n            if (err) {} else {\n              const features = geoJSON.readFeatures(res, {\n                \"dataProjection\": 'EPSG:4326',\n                \"featureProjection\": 'EPSG:3857',\n                \"id_\": res.features[0].properties.STATEFP\n              });\n              source.addFeatures(features);\n              dispatch({\n                type: 'SELECT_BY_FIPS_FINISHED'\n              });\n              dispatch({\n                type: 'STATES_AVAILABLE',\n                payload: {\n                  statesAvailable: true\n                }\n              });\n            }\n          });\n        }\n      });\n      dispatch({\n        type: \"SELECT_BY_FIPS_FINISHED\"\n      });\n    } else {\n      dispatch({\n        type: \"SELECT_BY_FIPS_FINISHED\"\n      });\n    }\n  },\n  doDrawToggleSelectState: () => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap(); //what if the active interaction is the select by fips?\n\n    if (store.selectSelectByFipsIsActive()) {\n      map.un(\"click\", store.doSelectByFips);\n      dispatch({\n        type: 'SELECT_BY_FIPS_DEACTIVATED',\n        payload: {\n          selectByFipsIsActive: false\n        }\n      });\n    } else {\n      map.on(\"click\", store.doSelectByFips);\n      dispatch({\n        type: 'SELECT_BY_FIPS_ACTIVATED',\n        payload: {\n          selectByFipsIsActive: true\n        }\n      });\n    }\n  },\n  selectSelectByFipsIsActive: state => {\n    return state.selectByFips.selectByFipsIsActive;\n  },\n  selectStatesAvailable: state => {\n    return state.selectByFips.statesAvailable;\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\nsifrontend\\src\\app-bundles\\select-by-fips-bundle.js"],"names":["transform","census","GeoJSON","geoJSON","name","getReducer","initialData","selectByFipsIsActive","statesAvailable","state","type","payload","Object","assign","doSelectByFips","e","dispatch","store","statsKeyStore","selectCitysdkStatsKey","layer","selectDrawLayer","source","getSource","coord","coordinate","coordOut","pointInPoly","x","getGeometry","intersectsCoordinate","getFeatures","length","every","err","res","geoHierarchy","features","readFeatures","properties","STATEFP","addFeatures","doDrawToggleSelectState","map","selectMap","selectSelectByFipsIsActive","un","on","selectByFips","selectStatesAvailable"],"mappings":"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","sourcesContent":["import {transform} from 'ol/proj';\r\nimport census from 'citysdk';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nconst geoJSON = new GeoJSON();\r\n\r\n\r\nexport default {\r\n    name: 'selectByFips',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            selectByFipsIsActive: false,\r\n            statesAvailable: false\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'SELECT_BY_FIPS_ACTIVATED':\r\n                case 'SELECT_BY_FIPS_DEACTIVATED':\r\n                case 'STATES_AVAILABLE':\r\n                return Object.assign({}, state, payload);\r\n                case 'SELECT_BY_FIPS_STARTED':\r\n                case 'SELECT_BY_FIPS_GET_FIPS':\r\n                case 'SELECT_BY_FIPS_GET_STATS':\r\n                case 'SELECT_BY_FIPS_FINISHED':\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doSelectByFips: (e) =>({dispatch, store}) =>{\r\n        dispatch({\r\n            type: \"SELECT_BY_FIPS_STARTED\"\r\n        })\r\n        var statsKeyStore = store.selectCitysdkStatsKey()\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n        var coord = transform(e.coordinate,'EPSG:3857','EPSG:4326')\r\n        var coordOut = false;\r\n        const pointInPoly = x => !x.getGeometry().intersectsCoordinate(e.coordinate)\r\n        if(source.getFeatures().length!=0){\r\n            \r\n            if(source.getFeatures().every(pointInPoly)){\r\n            }else{\r\n                coordOut = true;\r\n            }\r\n        }\r\n\r\n        if(!coordOut){\r\n            dispatch({\r\n                type: \"SELECT_BY_FIPS_GET_FIPS\"\r\n            })\r\n            census({\r\n                \"vintage\" : 2015,    // required\r\n                \"geoHierarchy\" : {   // required\r\n                    \"state\" : {\r\n                    \"lat\" : coord[1], \r\n                    \"lng\" : coord[0]\r\n                    }\r\n                }\r\n                }, \r\n                (err, res) => {\r\n                    if(err){\r\n\r\n                    }else{\r\n                    dispatch({\r\n                        type: 'SELECT_BY_FIPS_STARTED'\r\n                    })\r\n                    census({\r\n                        \"vintage\" : \"2015\",\r\n                        \"geoHierarchy\" : {\r\n                            \"state\": res.geoHierarchy.state,\r\n                        },\r\n                        \"sourcePath\" : [\"acs\", \"acs5\"],  \r\n                        \"values\" : [\"B19083_001E\"],    // GINI index             \r\n                        \"statsKey\" : statsKeyStore,\r\n                        \"geoResolution\" : \"5m\"\r\n                    },\r\n                    (err, res) => {\r\n                        if(err){\r\n\r\n                        }else{\r\n                            const features = geoJSON.readFeatures(res,{\"dataProjection\" : 'EPSG:4326', \"featureProjection\":'EPSG:3857', \"id_\": res.features[0].properties.STATEFP });\r\n                            source.addFeatures(features);\r\n                            dispatch({\r\n                                type: 'SELECT_BY_FIPS_FINISHED'\r\n                            })\r\n                            dispatch({\r\n                                type: 'STATES_AVAILABLE',\r\n                                payload:{\r\n                                    statesAvailable: true\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                )\r\n                }\r\n            })\r\n            dispatch({\r\n                type: \"SELECT_BY_FIPS_FINISHED\"\r\n            })            \r\n        }else{\r\n            dispatch(\r\n                {\r\n                    type: \"SELECT_BY_FIPS_FINISHED\"\r\n                }\r\n            )\r\n        }\r\n            \r\n    },\r\n    doDrawToggleSelectState: () =>({dispatch, store}) =>{\r\n\r\n        const map = store.selectMap();\r\n        //what if the active interaction is the select by fips?\r\n        if (store.selectSelectByFipsIsActive()){\r\n            map.un(\"click\", store.doSelectByFips)\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_DEACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: false,\r\n                }\r\n            })\r\n        }else{\r\n            map.on(\"click\", store.doSelectByFips)\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_ACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: true,\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    ,\r\n    selectSelectByFipsIsActive: (state) =>{\r\n        return state.selectByFips.selectByFipsIsActive;\r\n    },\r\n    selectStatesAvailable: (state) =>{\r\n        return state.selectByFips.statesAvailable;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}