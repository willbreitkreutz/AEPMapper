{"ast":null,"code":"import { transform } from 'ol/proj';\nimport census from 'citysdk';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport * as turf from '@turf/turf';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'selectByFips',\n  getReducer: () => {\n    const initialData = {\n      selectByFipsIsActive: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'SELECT_BY_FIPS_ACTIVATED':\n        case 'SELECT_BY_FIPS_DEACTIVATED':\n          return Object.assign({}, state, payload);\n\n        case 'SELECT_BY_FIPS_STARTED':\n        case 'SELECT_BY_FIPS_GET_FIPS':\n        case 'SELECT_BY_FIPS_GET_STATS':\n        case 'SELECT_BY_FIPS_FINISHED':\n        default:\n          return state;\n      }\n    };\n  },\n  doSelectByFips: e => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: \"SELECT_BY_FIPS_STARTED\"\n    });\n    var statsKeyStore = store.selectCitysdkStatsKey();\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource(); //it seems like i refactored, but i dont remember what I did. this looks like a click handler \n    //e is now undef - so i probably need to assign a click and properly remove it.\n\n    var coord = transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');\n    var coordOut = false;\n\n    if (source.getFeatures().length != 0) {\n      coordOut = source.getFeatures()[0].getGeometry().intersectsCoordinate(e.coordinate);\n    }\n\n    if (!coordOut) {\n      //use turf to see if layer already contains the point (or go through the feature attributes to see if the fips already has been clicked.)\n      dispatch({\n        type: \"SELECT_BY_FIPS_GET_FIPS\"\n      }); //need to parralell fetch stats from the nsi api\n\n      census({\n        \"vintage\": 2015,\n        // required\n        \"geoHierarchy\": {\n          // required\n          \"state\": {\n            \"lat\": coord[1],\n            \"lng\": coord[0]\n          }\n        }\n      }, (err, res) => {\n        if (err) {} else {\n          dispatch({\n            type: 'SELECT_BY_FIPS_STARTED'\n          });\n          census({\n            \"vintage\": \"2015\",\n            \"geoHierarchy\": {\n              \"state\": res.geoHierarchy.state //\"county\": res.geoHierarchy.county\n\n            },\n            \"sourcePath\": [\"acs\", \"acs5\"],\n            \"values\": [\"B19083_001E\"],\n            // GINI index             \n            \"statsKey\": statsKeyStore,\n            \"geoResolution\": \"5m\"\n          }, (err, res) => {\n            if (err) {} else {\n              const features = geoJSON.readFeatures(res, {\n                \"dataProjection\": 'EPSG:4326',\n                \"featureProjection\": 'EPSG:3857',\n                \"id_\": res.features[0].properties.STATEFP\n              });\n              source.addFeatures(features);\n              dispatch({\n                type: 'SELECT_BY_FIPS_FINISHED'\n              });\n            }\n          });\n        }\n      });\n      dispatch({\n        type: \"SELECT_BY_FIPS_FINISHED\"\n      });\n    } else {\n      dispatch({\n        type: \"SELECT_BY_FIPS_FINISHED\"\n      });\n    }\n  },\n  doDrawToggleSelectState: () => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap(); //what if the active interaction is the select by fips?\n\n    if (store.selectSelectByFipsIsActive()) {\n      map.un(\"click\", store.doSelectByFips);\n      dispatch({\n        type: 'SELECT_BY_FIPS_DEACTIVATED',\n        payload: {\n          selectByFipsIsActive: false\n        }\n      });\n    } else {\n      map.on(\"click\", store.doSelectByFips);\n      dispatch({\n        type: 'SELECT_BY_FIPS_ACTIVATED',\n        payload: {\n          selectByFipsIsActive: true\n        }\n      });\n    }\n  },\n  selectSelectByFipsIsActive: state => {\n    return state.selectByFips.selectByFipsIsActive;\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\nsifrontend\\src\\app-bundles\\select-by-fips-bundle.js"],"names":["transform","census","GeoJSON","turf","geoJSON","name","getReducer","initialData","selectByFipsIsActive","state","type","payload","Object","assign","doSelectByFips","e","dispatch","store","statsKeyStore","selectCitysdkStatsKey","layer","selectDrawLayer","source","getSource","coord","coordinate","coordOut","getFeatures","length","getGeometry","intersectsCoordinate","err","res","geoHierarchy","features","readFeatures","properties","STATEFP","addFeatures","doDrawToggleSelectState","map","selectMap","selectSelectByFipsIsActive","un","on","selectByFips"],"mappings":"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","sourcesContent":["import {transform} from 'ol/proj';\r\nimport census from 'citysdk';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport * as turf from '@turf/turf';\r\nconst geoJSON = new GeoJSON();\r\n\r\n\r\nexport default {\r\n    name: 'selectByFips',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            selectByFipsIsActive: false,\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'SELECT_BY_FIPS_ACTIVATED':\r\n                case 'SELECT_BY_FIPS_DEACTIVATED':\r\n                return Object.assign({}, state, payload);\r\n                case 'SELECT_BY_FIPS_STARTED':\r\n                case 'SELECT_BY_FIPS_GET_FIPS':\r\n                case 'SELECT_BY_FIPS_GET_STATS':\r\n                case 'SELECT_BY_FIPS_FINISHED':\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doSelectByFips: (e) =>({dispatch, store}) =>{\r\n        dispatch({\r\n            type: \"SELECT_BY_FIPS_STARTED\"\r\n        })\r\n        var statsKeyStore = store.selectCitysdkStatsKey()\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n\r\n        //it seems like i refactored, but i dont remember what I did. this looks like a click handler \r\n        //e is now undef - so i probably need to assign a click and properly remove it.\r\n        var coord = transform(e.coordinate,'EPSG:3857','EPSG:4326')\r\n        var coordOut = false;\r\n        if(source.getFeatures().length!=0){\r\n            coordOut = source.getFeatures()[0].getGeometry().intersectsCoordinate(e.coordinate)\r\n        }\r\n\r\n        if(!coordOut){\r\n            //use turf to see if layer already contains the point (or go through the feature attributes to see if the fips already has been clicked.)\r\n            dispatch({\r\n                type: \"SELECT_BY_FIPS_GET_FIPS\"\r\n            })\r\n\r\n            //need to parralell fetch stats from the nsi api\r\n            census({\r\n                \"vintage\" : 2015,    // required\r\n                \"geoHierarchy\" : {   // required\r\n                    \"state\" : {\r\n                    \"lat\" : coord[1], \r\n                    \"lng\" : coord[0]\r\n                    }\r\n                }\r\n                }, \r\n                (err, res) => {\r\n                    if(err){\r\n\r\n                    }else{\r\n                    dispatch({\r\n                        type: 'SELECT_BY_FIPS_STARTED'\r\n                    })\r\n                    census({\r\n                        \"vintage\" : \"2015\",\r\n                        \"geoHierarchy\" : {\r\n                            \"state\": res.geoHierarchy.state,\r\n                            //\"county\": res.geoHierarchy.county\r\n                        },\r\n                        \"sourcePath\" : [\"acs\", \"acs5\"],  \r\n                        \"values\" : [\"B19083_001E\"],    // GINI index             \r\n                        \"statsKey\" : statsKeyStore,\r\n                        \"geoResolution\" : \"5m\"\r\n                    },\r\n                    (err, res) => {\r\n                        if(err){\r\n\r\n                        }else{\r\n                            const features = geoJSON.readFeatures(res,{\"dataProjection\" : 'EPSG:4326', \"featureProjection\":'EPSG:3857', \"id_\": res.features[0].properties.STATEFP });\r\n                            source.addFeatures(features);\r\n                            dispatch({\r\n                                type: 'SELECT_BY_FIPS_FINISHED'\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                )\r\n                }\r\n            })\r\n            dispatch({\r\n                type: \"SELECT_BY_FIPS_FINISHED\"\r\n            })            \r\n        }else{\r\n            dispatch(\r\n                {\r\n                    type: \"SELECT_BY_FIPS_FINISHED\"\r\n                }\r\n            )\r\n        }\r\n            \r\n    },\r\n    doDrawToggleSelectState: () =>({dispatch, store}) =>{\r\n\r\n        const map = store.selectMap();\r\n        //what if the active interaction is the select by fips?\r\n        if (store.selectSelectByFipsIsActive()){\r\n            map.un(\"click\", store.doSelectByFips)\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_DEACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: false,\r\n                }\r\n            })\r\n        }else{\r\n            map.on(\"click\", store.doSelectByFips)\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_ACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: true,\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    ,\r\n    selectSelectByFipsIsActive: (state) =>{\r\n        return state.selectByFips.selectByFipsIsActive;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}