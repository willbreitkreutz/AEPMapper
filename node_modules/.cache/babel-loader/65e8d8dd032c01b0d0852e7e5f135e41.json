{"ast":null,"code":"import GeoJSON from 'ol/format/GeoJSON';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'drawData',\n  getReducer: () => {\n    const initialData = {\n      shouldFetch: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_DATA_FETCH_STARTED':\n          return Object.assign({}, state, payload);\n\n        case 'DRAW_INITIALIZE_FINISHED':\n          return Object.assign({}, state, {\n            shouldFetch: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawDataFetch: () => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    dispatch({\n      type: 'DRAW_DATA_FETCH_STARTED',\n      payload: {\n        shouldFetch: false\n      }\n    });\n    apiGet('/mydata', (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error('ERROR', response);\n      } else {\n        const layer = store.selectDrawLayer();\n        const source = layer.getSource();\n        const features = geoJSON.readFeatures(body);\n        source.addFeatures(features);\n      }\n    });\n    dispatch({\n      type: 'DRAW_DATA_FETCH_FINISHED',\n      payload: {}\n    });\n  },\n  doDrawDataHandleAdd: e => ({\n    dispatch,\n    store,\n    apiPost\n  }) => {\n    if (!e.feature.getId()) {\n      const styleSettings = store.selectDrawStyleSettings();\n      e.feature.set('style', styleSettings, true);\n      const geoJsonFeature = geoJSON.writeFeature(e.feature);\n      apiPost('/data', JSON.parse(geoJsonFeature), (err, response, body) => {\n        if (err || response.statusCode !== 200) {\n          console.error('ERROR', response);\n        } else {\n          e.feature.setId(body.id);\n        }\n      });\n    }\n  },\n  doDrawDataHandleRemove: e => ({\n    dispatch,\n    store,\n    apiDelete\n  }) => {\n    const id = e.feature.getId();\n\n    if (id) {\n      apiDelete(\"/data/\".concat(id), (err, response, body) => {\n        if (err || response.statusCode !== 200) {\n          console.error('ERROR', response);\n        } else {\n          console.log(body);\n        }\n      });\n    }\n  },\n  doDrawDataHandleChange: e => ({\n    dispatch,\n    store,\n    apiPut\n  }) => {\n    const id = e.feature.getId();\n\n    if (id) {\n      const geoJsonFeature = geoJSON.writeFeature(e.feature);\n      apiPut(\"/data/\".concat(id), JSON.parse(geoJsonFeature), (err, response, body) => {\n        if (err || response.statusCode !== 200) {\n          console.error('ERROR', response);\n        } else {\n          console.log(body);\n        }\n      });\n    }\n  },\n  reactDrawDataShouldFetch: state => {\n    if (state.drawData.shouldFetch) return {\n      actionCreator: 'doDrawDataFetch'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\draw-data-bundle.js"],"names":["GeoJSON","geoJSON","name","getReducer","initialData","shouldFetch","state","type","payload","Object","assign","doDrawDataFetch","dispatch","store","apiGet","err","response","body","statusCode","console","error","layer","selectDrawLayer","source","getSource","features","readFeatures","addFeatures","doDrawDataHandleAdd","e","apiPost","feature","getId","styleSettings","selectDrawStyleSettings","set","geoJsonFeature","writeFeature","JSON","parse","setId","id","doDrawDataHandleRemove","apiDelete","log","doDrawDataHandleChange","apiPut","reactDrawDataShouldFetch","drawData","actionCreator"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AACA,eAAc;AACVE,EAAAA,IAAI,EAAE,UADI;AAEVC,EAAAA,UAAU,EAAE,MAAK;AACb,UAAMC,WAAW,GAAG;AAChBC,MAAAA,WAAW,EAAE;AADG,KAApB;AAGA,WAAO,CAACC,KAAK,GAAGF,WAAT,EAAsB;AAAEG,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAtB,KAA2C;AAC9C,cAAOD,IAAP;AACI,aAAK,yBAAL;AACI,iBAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACJ,aAAK,0BAAL;AACI,iBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC5BD,YAAAA,WAAW,EAAE;AADe,WAAzB,CAAP;;AAGJ;AACI,iBAAOC,KAAP;AARR;AAUH,KAXD;AAYH,GAlBS;AAmBVK,EAAAA,eAAe,EAAE,MAAM,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAD,KAAgC;AACnDF,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE,yBAAP;AAAkCC,MAAAA,OAAO,EAAE;AAAEH,QAAAA,WAAW,EAAE;AAAf;AAA3C,KAAD,CAAR;AACAS,IAAAA,MAAM,CAAC,SAAD,EAAW,CAACC,GAAD,EAAKC,QAAL,EAAcC,IAAd,KAAqB;AAClC,UAAGF,GAAG,IAAIC,QAAQ,CAACE,UAAT,KAAwB,GAAlC,EAAsC;AAClCC,QAAAA,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBJ,QAAvB;AACH,OAFD,MAEK;AACD,cAAMK,KAAK,GAAGR,KAAK,CAACS,eAAN,EAAd;AACA,cAAMC,MAAM,GAAGF,KAAK,CAACG,SAAN,EAAf;AACA,cAAMC,QAAQ,GAAGxB,OAAO,CAACyB,YAAR,CAAqBT,IAArB,CAAjB;AACAM,QAAAA,MAAM,CAACI,WAAP,CAAmBF,QAAnB;AACH;AACJ,KATK,CAAN;AAUAb,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE,0BAAP;AAAmCC,MAAAA,OAAO,EAAE;AAA5C,KAAD,CAAR;AACH,GAhCS;AAiCVoB,EAAAA,mBAAmB,EAAEC,CAAD,IAAO,CAAC;AAACjB,IAAAA,QAAD;AAAWC,IAAAA,KAAX;AAAkBiB,IAAAA;AAAlB,GAAD,KAAgC;AACvD,QAAG,CAACD,CAAC,CAACE,OAAF,CAAUC,KAAV,EAAJ,EAAsB;AAClB,YAAMC,aAAa,GAAGpB,KAAK,CAACqB,uBAAN,EAAtB;AACAL,MAAAA,CAAC,CAACE,OAAF,CAAUI,GAAV,CAAc,OAAd,EAAsBF,aAAtB,EAAoC,IAApC;AACA,YAAMG,cAAc,GAAGnC,OAAO,CAACoC,YAAR,CAAqBR,CAAC,CAACE,OAAvB,CAAvB;AACAD,MAAAA,OAAO,CAAC,OAAD,EAAUQ,IAAI,CAACC,KAAL,CAAWH,cAAX,CAAV,EAAsC,CAACrB,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,KAAwB;AACrE,YAAGF,GAAG,IAAIC,QAAQ,CAACE,UAAT,KAAwB,GAAlC,EAAsC;AAClCC,UAAAA,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBJ,QAAvB;AACH,SAFD,MAEK;AACDa,UAAAA,CAAC,CAACE,OAAF,CAAUS,KAAV,CAAgBvB,IAAI,CAACwB,EAArB;AACH;AACJ,OANU,CAAP;AAOH;AACJ,GA9CS;AA+CVC,EAAAA,sBAAsB,EAAEb,CAAD,IAAO,CAAC;AAACjB,IAAAA,QAAD;AAAWC,IAAAA,KAAX;AAAkB8B,IAAAA;AAAlB,GAAD,KAAkC;AAC5D,UAAMF,EAAE,GAAGZ,CAAC,CAACE,OAAF,CAAUC,KAAV,EAAX;;AACA,QAAGS,EAAH,EAAM;AACFE,MAAAA,SAAS,iBAAUF,EAAV,GAAgB,CAAC1B,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,KAAwB;AACjD,YAAGF,GAAG,IAAIC,QAAQ,CAACE,UAAT,KAAwB,GAAlC,EAAsC;AAClCC,UAAAA,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBJ,QAAvB;AACH,SAFD,MAEK;AACDG,UAAAA,OAAO,CAACyB,GAAR,CAAY3B,IAAZ;AACH;AACJ,OANY,CAAT;AAOH;AACJ,GA1DS;AA2DV4B,EAAAA,sBAAsB,EAAEhB,CAAD,IAAO,CAAC;AAACjB,IAAAA,QAAD;AAAWC,IAAAA,KAAX;AAAkBiC,IAAAA;AAAlB,GAAD,KAA+B;AACzD,UAAML,EAAE,GAAGZ,CAAC,CAACE,OAAF,CAAUC,KAAV,EAAX;;AACA,QAAGS,EAAH,EAAM;AACF,YAAML,cAAc,GAAGnC,OAAO,CAACoC,YAAR,CAAqBR,CAAC,CAACE,OAAvB,CAAvB;AACAe,MAAAA,MAAM,iBAAUL,EAAV,GAAgBH,IAAI,CAACC,KAAL,CAAWH,cAAX,CAAhB,EAA4C,CAACrB,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,KAAwB;AAC1E,YAAGF,GAAG,IAAIC,QAAQ,CAACE,UAAT,KAAwB,GAAlC,EAAsC;AAClCC,UAAAA,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBJ,QAAvB;AACH,SAFD,MAEK;AACDG,UAAAA,OAAO,CAACyB,GAAR,CAAY3B,IAAZ;AACH;AACJ,OANS,CAAN;AAOH;AACJ,GAvES;AAwEV8B,EAAAA,wBAAwB,EAAEzC,KAAD,IAAU;AAC/B,QAAGA,KAAK,CAAC0C,QAAN,CAAe3C,WAAlB,EAA+B,OAAO;AAAC4C,MAAAA,aAAa,EAAE;AAAhB,KAAP;AAClC;AA1ES,CAAd","sourcesContent":["import GeoJSON from 'ol/format/GeoJSON';\r\nconst geoJSON = new GeoJSON();\r\nexport default{\r\n    name: 'drawData',\r\n    getReducer: () =>{\r\n        const initialData = {\r\n            shouldFetch: false\r\n        }\r\n        return (state = initialData, { type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_DATA_FETCH_STARTED':\r\n                    return Object.assign({}, state, payload)\r\n                case 'DRAW_INITIALIZE_FINISHED':\r\n                    return Object.assign({}, state, {\r\n                        shouldFetch: true\r\n                    })\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawDataFetch: () => ({ dispatch, store, apiGet}) => {\r\n        dispatch({type: 'DRAW_DATA_FETCH_STARTED', payload: { shouldFetch: false}})\r\n        apiGet('/mydata',(err,response,body)=>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                const layer = store.selectDrawLayer();\r\n                const source = layer.getSource();\r\n                const features = geoJSON.readFeatures(body);\r\n                source.addFeatures(features);\r\n            }\r\n        })\r\n        dispatch({type: 'DRAW_DATA_FETCH_FINISHED', payload: {}})\r\n    },\r\n    doDrawDataHandleAdd:(e) => ({dispatch, store, apiPost}) => {\r\n        if(!e.feature.getId()){\r\n            const styleSettings = store.selectDrawStyleSettings();\r\n            e.feature.set('style',styleSettings,true);\r\n            const geoJsonFeature = geoJSON.writeFeature(e.feature)\r\n            apiPost('/data', JSON.parse(geoJsonFeature), (err, response, body) =>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                e.feature.setId(body.id)\r\n            }\r\n        })\r\n        }\r\n    },\r\n    doDrawDataHandleRemove:(e) => ({dispatch, store, apiDelete}) => {\r\n        const id = e.feature.getId();\r\n        if(id){\r\n            apiDelete(`/data/${id}`, (err, response, body) =>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                console.log(body)\r\n            }\r\n        })\r\n        }\r\n    },\r\n    doDrawDataHandleChange:(e) => ({dispatch, store, apiPut}) => {\r\n        const id = e.feature.getId();\r\n        if(id){\r\n            const geoJsonFeature = geoJSON.writeFeature(e.feature)\r\n            apiPut(`/data/${id}`, JSON.parse(geoJsonFeature), (err, response, body) =>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                console.log(body);\r\n            }\r\n        })\r\n        }\r\n    },\r\n    reactDrawDataShouldFetch:(state) =>{\r\n        if(state.drawData.shouldFetch) return {actionCreator: 'doDrawDataFetch'}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}