{"ast":null,"code":"const geoJSON = new GeoJSON();\nexport default {\n  name: 'citysdkFips',\n  getReducer: () => {\n    const initialData = {\n      coordinates: null,\n      state: null,\n      county: null\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'CITYSDK_COORDINATES_PROVIDED':\n        case 'CITYSDK_FIPS_REQUEST_STARTED':\n        case 'CITYSDK_FIPS_REQUEST_FINSIHED':\n          return Object.assign({}, state, payload);\n\n        default:\n          return state;\n      }\n    };\n  },\n  doSetCoords: coords => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'CITYSDK_COORDINATES_PROVIDED',\n      payload: {\n        coordinates: coords\n      }\n    });\n  },\n  doNSIFetch: () => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    dispatch({\n      type: 'NSI_FETCH_STARTED',\n      payload: {\n        shouldFetch: false\n      }\n    });\n    apiGet('/data', (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error('ERROR', response);\n      } else {\n        console.log(\"Not fetching NSI data yet.\"); // const layer = store.selectNSILayer();\n        // const source = layer.getSource();\n        // const features = geoJSON.readFeatures(body);\n        // source.addFeatures(features);\n        // dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\n        //     shouldCalculateStats: true\n        // }})\n      }\n    });\n    dispatch({\n      type: 'NSI_FETCH_FINISHED',\n      payload: {}\n    });\n  },\n  doNSIHandleMsg: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'NSI_HANDLE_MSG_STARTED',\n      payload: {\n        shouldHandleMsg: false\n      }\n    });\n    const ready = store.selectNSIReady();\n\n    if (ready) {\n      const myEdipi = store.selectAuthEdipi();\n      const lastMessage = store.selectNSILastMessage();\n      const data = JSON.parse(lastMessage.data);\n\n      if (myEdipi !== data.edipi) {\n        switch (data.action) {\n          case 'insert':\n            store.doNSIFetchFeatureById(data.id, data.edipi);\n            break;\n\n          case 'delete':\n            store.doNSIDeleteFeatureById(data.id);\n            break;\n\n          case 'update':\n            store.doNSIFetchFeatureById(data.id, data.edipi);\n            break;\n\n          default:\n        }\n      }\n    }\n  },\n  doNSIFetchFeatureById: (id, edipi) => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    apiGet(\"/data/\".concat(edipi, \"/\").concat(id), (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error(response);\n      } else {\n        const layer = store.selectNSILayer();\n        const source = layer.getSource();\n        const feature = source.getFeatureById(id);\n\n        if (feature) {\n          source.removeFeature(feature);\n        }\n\n        const newFeature = geoJSON.readFeature(body);\n        source.addFeature(newFeature);\n      }\n    });\n  },\n  doNSIDeleteFeatureById: (id, edipi) => ({\n    dispatch,\n    store,\n    apiDelete\n  }) => {\n    const layer = store.selectNSILayer();\n    const source = layer.getSource();\n    const feature = source.getFeatureById(id);\n\n    if (feature) {\n      source.removeFeature(feature);\n    }\n  },\n  selectNSILayer: state => {\n    return state.NSI.layer;\n  },\n  reactorNSIShouldHandleMsg: state => {\n    if (state.NSI.shouldHandleMsg) return {\n      actionCreator: 'doNSIHandleMsg'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\nsifrontend\\src\\app-bundles\\citysdk-fips-bundle.js"],"names":["geoJSON","GeoJSON","name","getReducer","initialData","coordinates","state","county","type","payload","Object","assign","doSetCoords","coords","dispatch","store","doNSIFetch","apiGet","shouldFetch","err","response","body","statusCode","console","error","log","doNSIHandleMsg","shouldHandleMsg","ready","selectNSIReady","myEdipi","selectAuthEdipi","lastMessage","selectNSILastMessage","data","JSON","parse","edipi","action","doNSIFetchFeatureById","id","doNSIDeleteFeatureById","layer","selectNSILayer","source","getSource","feature","getFeatureById","removeFeature","newFeature","readFeature","addFeature","apiDelete","NSI","reactorNSIShouldHandleMsg","actionCreator"],"mappings":"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","sourcesContent":["const geoJSON = new GeoJSON();\r\n\r\nexport default{\r\n    name: 'citysdkFips',\r\n    getReducer:()=>{\r\n        const initialData = {\r\n            coordinates: null,\r\n            state: null,\r\n            county: null\r\n        }\r\n        return (state = initialData, {type, payload})=>{\r\n            switch(type){\r\n                case 'CITYSDK_COORDINATES_PROVIDED':\r\n                case 'CITYSDK_FIPS_REQUEST_STARTED':\r\n                case 'CITYSDK_FIPS_REQUEST_FINSIHED':\r\n                    return Object.assign({}, state, payload)\r\n                default:\r\n                    return state\r\n            }\r\n        }\r\n    },    \r\n    doSetCoords: (coords) => ({dispatch, store}) => {\r\n    dispatch({type: 'CITYSDK_COORDINATES_PROVIDED', payload: {coordinates: coords}})\r\n    },\r\ndoNSIFetch: () => ({dispatch, store, apiGet}) => {\r\n    dispatch({type: 'NSI_FETCH_STARTED', payload: {shouldFetch: false}})\r\n\r\n    \r\n    apiGet('/data',(err,response,body)=>{\r\n        if(err || response.statusCode !== 200){\r\n            console.error('ERROR', response);\r\n        }else{\r\n            console.log(\"Not fetching NSI data yet.\")\r\n            // const layer = store.selectNSILayer();\r\n            // const source = layer.getSource();\r\n            // const features = geoJSON.readFeatures(body);\r\n            // source.addFeatures(features);\r\n            // dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\r\n            //     shouldCalculateStats: true\r\n            // }})\r\n        }\r\n    })\r\n    dispatch({type: 'NSI_FETCH_FINISHED', payload: {}})\r\n},\r\ndoNSIHandleMsg: () => ({dispatch, store}) => {\r\n    dispatch({type: 'NSI_HANDLE_MSG_STARTED', payload:{shouldHandleMsg: false}})\r\n    const ready = store.selectNSIReady();\r\n    if(ready){\r\n        const myEdipi = store.selectAuthEdipi();\r\n        const lastMessage = store.selectNSILastMessage();\r\n        const data = JSON.parse(lastMessage.data)\r\n        if(myEdipi !== data.edipi){\r\n            switch(data.action){\r\n                case 'insert':\r\n                    store.doNSIFetchFeatureById(data.id, data.edipi)\r\n                    break;\r\n                case 'delete':\r\n                    store.doNSIDeleteFeatureById(data.id)\r\n                    break;\r\n                case 'update':\r\n                    store.doNSIFetchFeatureById(data.id, data.edipi)\r\n                    break;\r\n                default:\r\n            }\r\n        }        \r\n    }\r\n\r\n\r\n},\r\ndoNSIFetchFeatureById: (id, edipi) => ({dispatch, store, apiGet}) =>{\r\n    apiGet(`/data/${edipi}/${id}`, (err, response, body) =>{\r\n        if(err || response.statusCode !== 200){\r\n            console.error(response)\r\n        }else{\r\n            const layer = store.selectNSILayer();\r\n            const source = layer.getSource();\r\n            const feature = source.getFeatureById(id)\r\n            if(feature){\r\n                source.removeFeature(feature);\r\n            }\r\n            const newFeature = geoJSON.readFeature(body);\r\n            source.addFeature(newFeature);\r\n        }\r\n    })\r\n},\r\ndoNSIDeleteFeatureById: (id, edipi) => ({dispatch, store, apiDelete}) =>{\r\n            const layer = store.selectNSILayer();\r\n            const source = layer.getSource();\r\n            const feature = source.getFeatureById(id)\r\n            if(feature){\r\n                source.removeFeature(feature);\r\n            }\r\n},\r\nselectNSILayer: (state) => {\r\n    return state.NSI.layer;\r\n},\r\nreactorNSIShouldHandleMsg: (state) => {\r\n    if(state.NSI.shouldHandleMsg) return {actionCreator: 'doNSIHandleMsg'}\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}