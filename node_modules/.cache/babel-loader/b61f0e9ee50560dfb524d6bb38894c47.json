{"ast":null,"code":"import GeoJSON from 'ol/format/GeoJSON';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'drawData',\n  getReducer: () => {\n    const initialData = {};\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_DATA_FETCH_STARTED':\n          return Object.assign({}, state, payload);\n\n        case 'DRAW_INITIALIZE_FINSHED':\n          return Object.assign({}, state, {\n            shouldFetch: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawDataFetch: () => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    dispatch({\n      type: 'DRAW_DATA_FETCH_STARTED',\n      payload: {\n        shouldFetch: false\n      }\n    });\n    apiGet('/mydata', (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error('ERROR', response);\n      } else {\n        const features = geoJSON.readFeatures(body);\n        console.log(features);\n      }\n    });\n  },\n  reactDrawDataShouldFetch: state => {\n    if (state.drawData.shouldFetch) return {\n      actionCreator: 'doDrawDataFetch'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\draw-data-bundle.js"],"names":["GeoJSON","geoJSON","name","getReducer","initialData","state","type","payload","Object","assign","shouldFetch","doDrawDataFetch","dispatch","store","apiGet","err","response","body","statusCode","console","error","features","readFeatures","log","reactDrawDataShouldFetch","drawData","actionCreator"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,mBAApB;AACA,MAAMC,OAAO,GAAG,IAAID,OAAJ,EAAhB;AACA,eAAc;AACVE,EAAAA,IAAI,EAAE,UADI;AAEVC,EAAAA,UAAU,EAAE,MAAK;AACb,UAAMC,WAAW,GAAG,EAApB;AAGA,WAAO,CAACC,KAAK,GAAGD,WAAT,EAAsB;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAtB,KAA2C;AAC9C,cAAOD,IAAP;AACI,aAAK,yBAAL;AACI,iBAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACJ,aAAK,yBAAL;AACI,iBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC5BK,YAAAA,WAAW,EAAE;AADe,WAAzB,CAAP;;AAGJ;AACI,iBAAOL,KAAP;AARR;AAUH,KAXD;AAYH,GAlBS;AAmBVM,EAAAA,eAAe,EAAE,MAAM,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB,GAAD,KAAgC;AACnDF,IAAAA,QAAQ,CAAC;AAACN,MAAAA,IAAI,EAAE,yBAAP;AAAkCC,MAAAA,OAAO,EAAE;AAAEG,QAAAA,WAAW,EAAE;AAAf;AAA3C,KAAD,CAAR;AACAI,IAAAA,MAAM,CAAC,SAAD,EAAW,CAACC,GAAD,EAAKC,QAAL,EAAcC,IAAd,KAAqB;AAClC,UAAGF,GAAG,IAAIC,QAAQ,CAACE,UAAT,KAAwB,GAAlC,EAAsC;AAClCC,QAAAA,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBJ,QAAvB;AACH,OAFD,MAEK;AACD,cAAMK,QAAQ,GAAGpB,OAAO,CAACqB,YAAR,CAAqBL,IAArB,CAAjB;AACAE,QAAAA,OAAO,CAACI,GAAR,CAAYF,QAAZ;AACH;AACJ,KAPK,CAAN;AAQH,GA7BS;AA8BVG,EAAAA,wBAAwB,EAAEnB,KAAD,IAAU;AAC/B,QAAGA,KAAK,CAACoB,QAAN,CAAef,WAAlB,EAA+B,OAAO;AAACgB,MAAAA,aAAa,EAAE;AAAhB,KAAP;AAClC;AAhCS,CAAd","sourcesContent":["import GeoJSON from 'ol/format/GeoJSON';\r\nconst geoJSON = new GeoJSON();\r\nexport default{\r\n    name: 'drawData',\r\n    getReducer: () =>{\r\n        const initialData = {\r\n\r\n        }\r\n        return (state = initialData, { type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_DATA_FETCH_STARTED':\r\n                    return Object.assign({}, state, payload)\r\n                case 'DRAW_INITIALIZE_FINSHED':\r\n                    return Object.assign({}, state, {\r\n                        shouldFetch: true\r\n                    })\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawDataFetch: () => ({ dispatch, store, apiGet}) => {\r\n        dispatch({type: 'DRAW_DATA_FETCH_STARTED', payload: { shouldFetch: false}})\r\n        apiGet('/mydata',(err,response,body)=>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                const features = geoJSON.readFeatures(body);\r\n                console.log(features);\r\n            }\r\n        })\r\n    },\r\n    reactDrawDataShouldFetch:(state) =>{\r\n        if(state.drawData.shouldFetch) return {actionCreator: 'doDrawDataFetch'}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}