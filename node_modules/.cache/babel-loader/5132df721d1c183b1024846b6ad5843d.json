{"ast":null,"code":"import { createElement, Component, Children } from 'react';\nvar CONTEXT_TYPES = {\n  store: function () {}\n};\n\nvar Provider =\n/*@__PURE__*/\nfunction (Component$$1) {\n  function Provider() {\n    Component$$1.apply(this, arguments);\n  }\n\n  if (Component$$1) Provider.__proto__ = Component$$1;\n  Provider.prototype = Object.create(Component$$1 && Component$$1.prototype);\n  Provider.prototype.constructor = Provider;\n\n  Provider.prototype.getChildContext = function getChildContext() {\n    return {\n      store: this.props.store\n    };\n  };\n\n  Provider.prototype.render = function render() {\n    return Children.only(this.props.children);\n  };\n\n  return Provider;\n}(Component);\n\nProvider.childContextTypes = CONTEXT_TYPES;\n\nvar connect = function () {\n  var args = [],\n      len = arguments.length;\n\n  while (len--) args[len] = arguments[len];\n\n  var Comp = args.slice(-1)[0];\n  var strings = args.length > 1 ? args.slice(0, -1) : [];\n  var actionCreators = [];\n  var keysToWatch = [];\n  strings.forEach(function (str) {\n    if (str.slice(0, 6) === 'select') {\n      keysToWatch.push(str);\n      return;\n    }\n\n    if (str.slice(0, 2) === 'do') {\n      actionCreators.push(str);\n      return;\n    }\n\n    throw Error(\"CanNotConnect \" + str);\n  });\n\n  var Connect =\n  /*@__PURE__*/\n  function (Component$$1) {\n    function Connect(props, context) {\n      var this$1 = this;\n      Component$$1.call(this, props, context);\n      var store = context.store;\n      this.state = store.select(keysToWatch);\n      this.unsubscribe = store.subscribeToSelectors(keysToWatch, this.setState.bind(this));\n      this.actionCreators = {};\n      actionCreators.forEach(function (name) {\n        this$1.actionCreators[name] = function () {\n          var args = [],\n              len = arguments.length;\n\n          while (len--) args[len] = arguments[len];\n\n          if (store.action) {\n            return store.action(name, args);\n          }\n\n          return store[name].apply(store, args);\n        };\n      });\n    }\n\n    if (Component$$1) Connect.__proto__ = Component$$1;\n    Connect.prototype = Object.create(Component$$1 && Component$$1.prototype);\n    Connect.prototype.constructor = Connect;\n\n    Connect.prototype.componentWillUnmount = function componentWillUnmount() {\n      this.unsubscribe();\n    };\n\n    Connect.prototype.render = function render() {\n      return createElement(Comp, Object.assign({}, this.props, this.state, this.actionCreators));\n    };\n\n    return Connect;\n  }(Component);\n\n  Connect.contextTypes = CONTEXT_TYPES;\n  Connect.displayName = 'connect(' + (Comp.displayName || Comp.name) + ')';\n  return Connect;\n};\n\nexport { Provider, connect };","map":null,"metadata":{},"sourceType":"module"}