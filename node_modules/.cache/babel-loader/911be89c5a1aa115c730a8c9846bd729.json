{"ast":null,"code":"/**\n * @module ol/interaction/Translate\n */\nimport Collection from '../Collection.js';\nimport { getChangeEventType } from '../Object.js';\nimport { listen } from '../events.js';\nimport Event from '../events/Event.js';\nimport { TRUE } from '../functions.js';\nimport { includes } from '../array.js';\nimport PointerInteraction from './Pointer.js';\nimport InteractionProperty from './Property.js';\n/**\n * @enum {string}\n */\n\nvar TranslateEventType = {\n  /**\n   * Triggered upon feature translation start.\n   * @event TranslateEvent#translatestart\n   * @api\n   */\n  TRANSLATESTART: 'translatestart',\n\n  /**\n   * Triggered upon feature translation.\n   * @event TranslateEvent#translating\n   * @api\n   */\n  TRANSLATING: 'translating',\n\n  /**\n   * Triggered upon feature translation end.\n   * @event TranslateEvent#translateend\n   * @api\n   */\n  TRANSLATEEND: 'translateend'\n};\n/**\n * @typedef {Object} Options\n * @property {Collection<import(\"../Feature.js\").default>} [features] Only features contained in this collection will be able to be translated. If\n * not specified, all features on the map will be able to be translated.\n * @property {Array<import(\"../layer/Layer.js\").default>|function(import(\"../layer/Layer.js\").default): boolean} [layers] A list of layers from which features should be\n * translated. Alternatively, a filter function can be provided. The\n * function will be called for each layer in the map and should return\n * `true` for layers that you want to be translatable. If the option is\n * absent, all visible layers will be considered translatable.\n * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position\n * will be checked for features. This only works for the canvas renderer and\n * not for WebGL.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Translate~Translate} instances\n * are instances of this type.\n */\n\nexport var TranslateEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function TranslateEvent(type, features, coordinate) {\n    Event.call(this, type);\n    /**\n     * The features being translated.\n     * @type {Collection<import(\"../Feature.js\").default>}\n     * @api\n     */\n\n    this.features = features;\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n\n    this.coordinate = coordinate;\n  }\n\n  if (Event) TranslateEvent.__proto__ = Event;\n  TranslateEvent.prototype = Object.create(Event && Event.prototype);\n  TranslateEvent.prototype.constructor = TranslateEvent;\n  return TranslateEvent;\n}(Event);\n/**\n * @classdesc\n * Interaction for translating (moving) features.\n *\n * @fires TranslateEvent\n * @api\n */\n\nvar Translate =\n/*@__PURE__*/\nfunction (PointerInteraction) {\n  function Translate(opt_options) {\n    var options = opt_options ? opt_options : {};\n    PointerInteraction.call(\n    /** @type {import(\"./Pointer.js\").Options} */\n    this, options);\n    /**\n     * The last position we translated to.\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n\n    this.lastCoordinate_ = null;\n    /**\n     * @type {Collection<import(\"../Feature.js\").default>}\n     * @private\n     */\n\n    this.features_ = options.features !== undefined ? options.features : null;\n    /** @type {function(import(\"../layer/Layer.js\").default): boolean} */\n\n    var layerFilter;\n\n    if (options.layers) {\n      if (typeof options.layers === 'function') {\n        layerFilter = options.layers;\n      } else {\n        var layers = options.layers;\n\n        layerFilter = function (layer) {\n          return includes(layers, layer);\n        };\n      }\n    } else {\n      layerFilter = TRUE;\n    }\n    /**\n     * @private\n     * @type {function(import(\"../layer/Layer.js\").default): boolean}\n     */\n\n\n    this.layerFilter_ = layerFilter;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;\n    /**\n     * @type {import(\"../Feature.js\").default}\n     * @private\n     */\n\n    this.lastFeature_ = null;\n    listen(this, getChangeEventType(InteractionProperty.ACTIVE), this.handleActiveChanged_, this);\n  }\n\n  if (PointerInteraction) Translate.__proto__ = PointerInteraction;\n  Translate.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  Translate.prototype.constructor = Translate;\n  /**\n   * @inheritDoc\n   */\n\n  Translate.prototype.handleDownEvent = function handleDownEvent(event) {\n    this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);\n\n    if (!this.lastCoordinate_ && this.lastFeature_) {\n      this.lastCoordinate_ = event.coordinate;\n      this.handleMoveEvent(event);\n      var features = this.features_ || new Collection([this.lastFeature_]);\n      this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATESTART, features, event.coordinate));\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Translate.prototype.handleUpEvent = function handleUpEvent(event) {\n    if (this.lastCoordinate_) {\n      this.lastCoordinate_ = null;\n      this.handleMoveEvent(event);\n      var features = this.features_ || new Collection([this.lastFeature_]);\n      this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATEEND, features, event.coordinate));\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Translate.prototype.handleDragEvent = function handleDragEvent(event) {\n    if (this.lastCoordinate_) {\n      var newCoordinate = event.coordinate;\n      var deltaX = newCoordinate[0] - this.lastCoordinate_[0];\n      var deltaY = newCoordinate[1] - this.lastCoordinate_[1];\n      var features = this.features_ || new Collection([this.lastFeature_]);\n      features.forEach(function (feature) {\n        var geom = feature.getGeometry();\n        geom.translate(deltaX, deltaY);\n        feature.setGeometry(geom);\n      });\n      this.lastCoordinate_ = newCoordinate;\n      this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATING, features, newCoordinate));\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Translate.prototype.handleMoveEvent = function handleMoveEvent(event) {\n    var elem = event.map.getViewport(); // Change the cursor to grab/grabbing if hovering any of the features managed\n    // by the interaction\n\n    if (this.featuresAtPixel_(event.pixel, event.map)) {\n      elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');\n      elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');\n    } else {\n      elem.classList.remove('ol-grab', 'ol-grabbing');\n    }\n  };\n  /**\n   * Tests to see if the given coordinates intersects any of our selected\n   * features.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel coordinate to test for intersection.\n   * @param {import(\"../PluggableMap.js\").default} map Map to test the intersection on.\n   * @return {import(\"../Feature.js\").default} Returns the feature found at the specified pixel\n   * coordinates.\n   * @private\n   */\n\n\n  Translate.prototype.featuresAtPixel_ = function featuresAtPixel_(pixel, map) {\n    return map.forEachFeatureAtPixel(pixel, function (feature) {\n      if (!this.features_ || includes(this.features_.getArray(), feature)) {\n        return feature;\n      }\n    }.bind(this), {\n      layerFilter: this.layerFilter_,\n      hitTolerance: this.hitTolerance_\n    });\n  };\n  /**\n   * Returns the Hit-detection tolerance.\n   * @returns {number} Hit tolerance in pixels.\n   * @api\n   */\n\n\n  Translate.prototype.getHitTolerance = function getHitTolerance() {\n    return this.hitTolerance_;\n  };\n  /**\n   * Hit-detection tolerance. Pixels inside the radius around the given position\n   * will be checked for features. This only works for the canvas renderer and\n   * not for WebGL.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @api\n   */\n\n\n  Translate.prototype.setHitTolerance = function setHitTolerance(hitTolerance) {\n    this.hitTolerance_ = hitTolerance;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Translate.prototype.setMap = function setMap(map) {\n    var oldMap = this.getMap();\n    PointerInteraction.prototype.setMap.call(this, map);\n    this.updateState_(oldMap);\n  };\n  /**\n   * @private\n   */\n\n\n  Translate.prototype.handleActiveChanged_ = function handleActiveChanged_() {\n    this.updateState_(null);\n  };\n  /**\n   * @param {import(\"../PluggableMap.js\").default} oldMap Old map.\n   * @private\n   */\n\n\n  Translate.prototype.updateState_ = function updateState_(oldMap) {\n    var map = this.getMap();\n    var active = this.getActive();\n\n    if (!map || !active) {\n      map = map || oldMap;\n\n      if (map) {\n        var elem = map.getViewport();\n        elem.classList.remove('ol-grab', 'ol-grabbing');\n      }\n    }\n  };\n\n  return Translate;\n}(PointerInteraction);\n\nexport default Translate;","map":null,"metadata":{},"sourceType":"module"}