{"ast":null,"code":"import basemaps from '../config/basemaps';\nimport { getLayer, getSource } from '../utils/layer-utils';\nimport { createSelector } from 'redux-bundler';\nexport default (opts => {\n  const defaults = {\n    name: 'basemaps',\n    basemaps: basemaps,\n    activeIdx: 0\n  };\n  const config = Object.assign({}, defaults, opts);\n  return {\n    name: config.name,\n    getReducer: () => {\n      const initialState = {\n        lyr: null,\n        src: null,\n        basemaps: config.basemaps,\n        activeIdx: config.activeIdx,\n        shouldCreateBasemapLayer: true,\n        shouldSetBasemap: false\n      };\n      return (state = initialState, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case 'BASEMAP_CHANGED':\n          case 'BASEMAP_SET_STARTED':\n          case 'BASEMAP_SET_FINISHED':\n          case 'BASEMAP_CREATE_LAYER_STARTED':\n          case 'BASEMAP_CREATE_LAYER_FINISHED':\n            return Object.assign({}, state, payload);\n\n          case 'MAP_INITIALIZED':\n            return Object.assign({}, state, {\n              shouldSetBasemap: true\n            });\n\n          default:\n            return state;\n        }\n      };\n    },\n    doBasemapsChange: idx => ({\n      dispatch\n    }) => {\n      dispatch({\n        type: 'BASEMAP_CHANGED',\n        payload: {\n          shouldSetBasemap: true,\n          activeIdx: idx\n        }\n      });\n    },\n    doBasemapsSet: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'BASEMAP_SET_STARTED',\n        payload: {\n          shouldSetBasemap: false\n        }\n      });\n      const map = store.selectMap();\n      const lyr = store.selectBasemapsLayer();\n      const config = store.selectBasemapsConfig();\n      const src = getSource(config);\n      map.removeLayer(lyr);\n      lyr.setSource(src);\n      map.getLayers().insertAt(0, lyr);\n      dispatch({\n        type: 'BASEMAP_SET_FINISHED',\n        payload: {\n          src: src\n        }\n      });\n    },\n    doBasemapsCreateLayer: () => ({\n      dispatch\n    }) => {\n      dispatch({\n        type: 'BASEMAP_CREATE_LAYER_STARTED',\n        payload: {\n          shouldCreateBasemapLayer: false\n        }\n      });\n      const lyr = getLayer({\n        serviceType: 'XYZ',\n        visible: true\n      });\n      dispatch({\n        type: 'BASEMAP_CREATE_LAYER_FINISHED',\n        payload: {\n          lyr: lyr\n        }\n      });\n    },\n    selectBasemapsConfig: createSelector('selectBasemapsActiveIdx', 'selectBasemaps', (idx, basemaps) => {\n      return basemaps[idx];\n    }),\n    selectBasemapsActiveIdx: state => {\n      return state.basemaps.activeIdx;\n    },\n    selectBasemaps: state => {\n      return state.basemaps.basemaps;\n    },\n    selectBasemapsLayer: state => {\n      return state.basemaps.lyr;\n    },\n    reactBasemapsShouldCreateLayer: state => {\n      if (state.basemaps.shouldCreateBasemapLayer) return {\n        actionCreator: 'doBasemapsCreateLayer'\n      };\n    },\n    reactShouldSetBasemap: state => {\n      if (state.basemaps.shouldSetBasemap) return {\n        actionCreator: 'doBasemapsSet'\n      };\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}