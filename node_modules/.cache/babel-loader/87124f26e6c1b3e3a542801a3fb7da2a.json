{"ast":null,"code":"import { debounce } from 'lodash';\nexport default (opts => {\n  const defaults = {\n    name: 'fileDrop',\n    wait: 200\n  };\n  const config = Object.assign({}, defaults, opts);\n  const uCaseName = config.name.charAt(0).toUpperCase() + config.name.slice(1);\n  const baseType = config.name.toUpperCase();\n  const doRegisterDropTarget = \"do\".concat(baseType, \"RegisterDropTarget\");\n  const doHandleDragEvent = \"do\".concat(baseType, \"HandleDragEvent\");\n  const doHandleDrop = \"do\".concat(baseType, \"HandleDrop\");\n  return {\n    name: config.name,\n    getReducer: () => {\n      const initialData = {\n        wait: config.wait\n      };\n      return (state = initialData, {\n        type,\n        payload\n      }) => {\n        return state;\n      };\n    },\n    [doHandleDragEvent]: (e, target) => ({\n      dispatch,\n      store\n    }) => {\n      if (!e.type) return;\n      const type = e.type.toUpperCase();\n      dispatch({\n        type: \"\".concat(uCaseName, \"_\").concat(type, \"_FIRED\"),\n        payload: {\n          e: e,\n          target: target\n        }\n      });\n    },\n    [doHandleDrop]: (e, target, onDrop) => ({\n      dispatch,\n      store\n    }) => {\n      if (!e.type) return;\n      const files = [];\n\n      if (e.dataTransfer.items) {\n        e.dataTransfer.items.forEach(item => {\n          if (item.kind === 'file') {\n            files.push(item.getAsFile());\n          }\n        });\n      } else if (e.dataTransfer.files) {\n        e.dataTransfer.files.forEach(file => {\n          files.push(file);\n        });\n      }\n\n      dispatch({\n        type: \"\".concat(uCaseName, \"_DROP_FIRED\"),\n        payload: {\n          e: e,\n          target: target,\n          files: files\n        }\n      });\n      if (onDrop && typeof onDrop === 'function') onDrop({\n        e: e,\n        target: target,\n        files: files\n      });\n    },\n    [doRegisterDropTarget]: (target, onDrop) => ({\n      store\n    }) => {\n      const handleEvent = e => {\n        e.preventDefault();\n        store[doHandleDragEvent](e, target);\n      };\n\n      const handleEventDebounced = debounce(handleEvent, config.wait);\n\n      const handleDrop = e => {\n        e.preventDefault();\n        store[doHandleDrop](e, target, onDrop);\n      };\n\n      target.addEventListener('drag', handleEventDebounced);\n      target.addEventListener('dragover', handleEventDebounced);\n      target.addEventListener('dragend', handleEvent);\n      target.addEventListener('dragenter', handleEvent);\n      target.addEventListener('dragexit', handleEvent);\n      target.addEventListener('dragleave', handleEvent);\n      target.addEventListener('dragstart', handleEvent);\n      target.addEventListener('drop', handleDrop);\n\n      const cleanUp = () => {\n        target.removeEventListener('drag', handleEventDebounced);\n        target.removeEventListener('dragover', handleEventDebounced);\n        target.removeEventListener('dragend', handleEvent);\n        target.removeEventListener('dragenter', handleEvent);\n        target.removeEventListener('dragexit', handleEvent);\n        target.removeEventListener('dragleave', handleEvent);\n        target.removeEventListener('dragstart', handleEvent);\n        target.removeEventListener('drop', handleDrop);\n      };\n\n      return cleanUp;\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}