{"ast":null,"code":"/**\n * @module ol/webgl\n */\n\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * @const\n * @type {number}\n */\nexport var ONE = 1;\n/**\n * @const\n * @type {number}\n */\n\nexport var SRC_ALPHA = 0x0302;\n/**\n * @const\n * @type {number}\n */\n\nexport var COLOR_ATTACHMENT0 = 0x8CE0;\n/**\n * @const\n * @type {number}\n */\n\nexport var COLOR_BUFFER_BIT = 0x00004000;\n/**\n * @const\n * @type {number}\n */\n\nexport var TRIANGLES = 0x0004;\n/**\n * @const\n * @type {number}\n */\n\nexport var TRIANGLE_STRIP = 0x0005;\n/**\n * @const\n * @type {number}\n */\n\nexport var ONE_MINUS_SRC_ALPHA = 0x0303;\n/**\n * @const\n * @type {number}\n */\n\nexport var ARRAY_BUFFER = 0x8892;\n/**\n * @const\n * @type {number}\n */\n\nexport var ELEMENT_ARRAY_BUFFER = 0x8893;\n/**\n * @const\n * @type {number}\n */\n\nexport var STREAM_DRAW = 0x88E0;\n/**\n * @const\n * @type {number}\n */\n\nexport var STATIC_DRAW = 0x88E4;\n/**\n * @const\n * @type {number}\n */\n\nexport var DYNAMIC_DRAW = 0x88E8;\n/**\n * @const\n * @type {number}\n */\n\nexport var CULL_FACE = 0x0B44;\n/**\n * @const\n * @type {number}\n */\n\nexport var BLEND = 0x0BE2;\n/**\n * @const\n * @type {number}\n */\n\nexport var STENCIL_TEST = 0x0B90;\n/**\n * @const\n * @type {number}\n */\n\nexport var DEPTH_TEST = 0x0B71;\n/**\n * @const\n * @type {number}\n */\n\nexport var SCISSOR_TEST = 0x0C11;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_BYTE = 0x1401;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_SHORT = 0x1403;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_INT = 0x1405;\n/**\n * @const\n * @type {number}\n */\n\nexport var FLOAT = 0x1406;\n/**\n * @const\n * @type {number}\n */\n\nexport var RGBA = 0x1908;\n/**\n * @const\n * @type {number}\n */\n\nexport var FRAGMENT_SHADER = 0x8B30;\n/**\n * @const\n * @type {number}\n */\n\nexport var VERTEX_SHADER = 0x8B31;\n/**\n * @const\n * @type {number}\n */\n\nexport var LINK_STATUS = 0x8B82;\n/**\n * @const\n * @type {number}\n */\n\nexport var LINEAR = 0x2601;\n/**\n * @const\n * @type {number}\n */\n\nexport var TEXTURE_MAG_FILTER = 0x2800;\n/**\n * @const\n * @type {number}\n */\n\nexport var TEXTURE_MIN_FILTER = 0x2801;\n/**\n * @const\n * @type {number}\n */\n\nexport var TEXTURE_WRAP_S = 0x2802;\n/**\n * @const\n * @type {number}\n */\n\nexport var TEXTURE_WRAP_T = 0x2803;\n/**\n * @const\n * @type {number}\n */\n\nexport var TEXTURE_2D = 0x0DE1;\n/**\n * @const\n * @type {number}\n */\n\nexport var TEXTURE0 = 0x84C0;\n/**\n * @const\n * @type {number}\n */\n\nexport var CLAMP_TO_EDGE = 0x812F;\n/**\n * @const\n * @type {number}\n */\n\nexport var COMPILE_STATUS = 0x8B81;\n/**\n * @const\n * @type {number}\n */\n\nexport var FRAMEBUFFER = 0x8D40;\n/** end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\n\nvar CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object=} opt_attributes Attributes.\n * @return {WebGLRenderingContext} WebGL rendering context.\n */\n\nexport function getContext(canvas, opt_attributes) {\n  var ii = CONTEXT_IDS.length;\n\n  for (var i = 0; i < ii; ++i) {\n    try {\n      var context = canvas.getContext(CONTEXT_IDS[i], opt_attributes);\n\n      if (context) {\n        return (\n          /** @type {!WebGLRenderingContext} */\n          context\n        );\n      }\n    } catch (e) {// pass\n    }\n  }\n\n  return null;\n}\n/**\n * Include debuggable shader sources.  Default is `true`. This should be set to\n * `false` for production builds.\n * @type {boolean}\n */\n\nexport var DEBUG = true;\n/**\n * The maximum supported WebGL texture size in pixels. If WebGL is not\n * supported, the value is set to `undefined`.\n * @type {number|undefined}\n */\n\nvar MAX_TEXTURE_SIZE; // value is set below\n\n/**\n * List of supported WebGL extensions.\n * @type {Array<string>}\n */\n\nvar EXTENSIONS; // value is set below\n\n/**\n * True if both OpenLayers and browser support WebGL.\n * @type {boolean}\n * @api\n */\n\nvar HAS = false; //TODO Remove side effects\n\nif (typeof window !== 'undefined' && 'WebGLRenderingContext' in window) {\n  try {\n    var canvas =\n    /** @type {HTMLCanvasElement} */\n    document.createElement('canvas');\n    var gl = getContext(canvas, {\n      failIfMajorPerformanceCaveat: true\n    });\n\n    if (gl) {\n      HAS = true;\n      MAX_TEXTURE_SIZE =\n      /** @type {number} */\n      gl.getParameter(gl.MAX_TEXTURE_SIZE);\n      EXTENSIONS = gl.getSupportedExtensions();\n    }\n  } catch (e) {// pass\n  }\n}\n\nexport { HAS, MAX_TEXTURE_SIZE, EXTENSIONS };","map":null,"metadata":{},"sourceType":"module"}