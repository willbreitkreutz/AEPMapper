{"ast":null,"code":"/**\n * @module ol/interaction/DragRotateAndZoom\n */\nimport { disable } from '../rotationconstraint.js';\nimport ViewHint from '../ViewHint.js';\nimport { shiftKeyOnly, mouseOnly } from '../events/condition.js';\nimport { rotate, rotateWithoutConstraints, zoom, zoomWithoutConstraints } from './Interaction.js';\nimport PointerInteraction from './Pointer.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition~shiftKeyOnly}.\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom and rotate the map by clicking and dragging\n * on the map.  By default, this interaction is limited to when the shift\n * key is held down.\n *\n * This interaction is only supported for mouse devices.\n *\n * And this interaction is not included in the default interactions.\n * @api\n */\n\nvar DragRotateAndZoom =\n/*@__PURE__*/\nfunction (PointerInteraction) {\n  function DragRotateAndZoom(opt_options) {\n    var options = opt_options ? opt_options : {};\n    PointerInteraction.call(\n    /** @type {import(\"./Pointer.js\").Options} */\n    this, options);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n\n    this.condition_ = options.condition ? options.condition : shiftKeyOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n\n    this.lastMagnitude_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.lastScaleDelta_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n  }\n\n  if (PointerInteraction) DragRotateAndZoom.__proto__ = PointerInteraction;\n  DragRotateAndZoom.prototype = Object.create(PointerInteraction && PointerInteraction.prototype);\n  DragRotateAndZoom.prototype.constructor = DragRotateAndZoom;\n  /**\n   * @inheritDoc\n   */\n\n  DragRotateAndZoom.prototype.handleDragEvent = function handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    var map = mapBrowserEvent.map;\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var deltaX = offset[0] - size[0] / 2;\n    var deltaY = size[1] / 2 - offset[1];\n    var theta = Math.atan2(deltaY, deltaX);\n    var magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    var view = map.getView();\n\n    if (view.getConstraints().rotation !== disable && this.lastAngle_ !== undefined) {\n      var angleDelta = theta - this.lastAngle_;\n      rotateWithoutConstraints(view, view.getRotation() - angleDelta);\n    }\n\n    this.lastAngle_ = theta;\n\n    if (this.lastMagnitude_ !== undefined) {\n      var resolution = this.lastMagnitude_ * (view.getResolution() / magnitude);\n      zoomWithoutConstraints(view, resolution);\n    }\n\n    if (this.lastMagnitude_ !== undefined) {\n      this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;\n    }\n\n    this.lastMagnitude_ = magnitude;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragRotateAndZoom.prototype.handleUpEvent = function handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.setHint(ViewHint.INTERACTING, -1);\n    var direction = this.lastScaleDelta_ - 1;\n    rotate(view, view.getRotation());\n    zoom(view, view.getResolution(), undefined, this.duration_, direction);\n    this.lastScaleDelta_ = 0;\n    return false;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  DragRotateAndZoom.prototype.handleDownEvent = function handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (this.condition_(mapBrowserEvent)) {\n      mapBrowserEvent.map.getView().setHint(ViewHint.INTERACTING, 1);\n      this.lastAngle_ = undefined;\n      this.lastMagnitude_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return DragRotateAndZoom;\n}(PointerInteraction);\n\nexport default DragRotateAndZoom;","map":null,"metadata":{},"sourceType":"module"}