{"ast":null,"code":"import VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nexport default {\n  name: 'draw',\n  getReducer: () => {\n    const initialData = {\n      layer: null,\n      shouldInitalize: false,\n      drawPoints: null,\n      drawLines: null,\n      drawPolygons: null,\n      activeInteraction: null\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_INITIALIZE_STARTED':\n        case 'DRAW_INITIALIZE_FINISHED':\n        case 'DRAW_ADD_INTERACTION':\n          return Object.assign({}, state, payload);\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawInitializeLayer: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'DRAW_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap();\n    const source = new VectorSource();\n    const layer = new VectorLayer({\n      source: source\n    });\n    const drawPoints = new Draw({\n      source: source,\n      type: 'Point'\n    });\n    const drawLines = new Draw({\n      source: source,\n      type: 'LineString'\n    });\n    const drawPolygons = new Draw({\n      source: source,\n      type: 'Polygon'\n    });\n    map.addLayer(layer);\n    dispatch({\n      type: 'DRAW_INITIALIZE_FINISHED',\n      payload: {\n        layer: layer,\n        drawPoints: drawPoints,\n        drawLines: drawLines,\n        drawPolygons: drawPolygons\n      }\n    });\n  },\n  doDrawAddInteraction: interaction => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap();\n    const activeInteraction = store.selectDrawActiveInteraction();\n    let newInteraction = null;\n    map.removeInteraction(activeInteraction);\n\n    if (interaction !== activeInteraction) {\n      map.addInteraction(interaction);\n      newInteraction = interaction;\n    }\n\n    dispatch({\n      type: 'DRAW_ADD_INTERACTION',\n      payload: {\n        activeInteraction: newInteraction\n      }\n    });\n  },\n  selectDrawLayer: state => {\n    return state.draw.layer;\n  },\n  selectDrawPoints: state => {\n    return state.draw.drawPoints;\n  },\n  selectDrawLines: state => {\n    return state.draw.drawLines;\n  },\n  selectDrawPolygons: state => {\n    return state.draw.drawPolygons;\n  },\n  selectDrawActiveInteraction: state => {\n    return state.draw.activeInteraction;\n  },\n  reactDrawShouldInitialize: state => {\n    if (state.draw.shouldInitalize) return {\n      actionCreator: 'doDrawInitializeLayer'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\draw-bundle.js"],"names":["VectorLayer","VectorSource","Draw","name","getReducer","initialData","layer","shouldInitalize","drawPoints","drawLines","drawPolygons","activeInteraction","state","type","payload","Object","assign","doDrawInitializeLayer","dispatch","store","map","selectMap","source","addLayer","doDrawAddInteraction","interaction","selectDrawActiveInteraction","newInteraction","removeInteraction","addInteraction","selectDrawLayer","draw","selectDrawPoints","selectDrawLines","selectDrawPolygons","reactDrawShouldInitialize","actionCreator"],"mappings":"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","sourcesContent":["import VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Draw from 'ol/interaction/Draw';\r\n\r\nexport default {\r\n    name: 'draw',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            layer: null,\r\n            shouldInitalize: false,\r\n            drawPoints: null,\r\n            drawLines: null,\r\n            drawPolygons: null,\r\n            activeInteraction: null\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_INITIALIZE_STARTED':\r\n                case  'DRAW_INITIALIZE_FINISHED':\r\n                case  'DRAW_ADD_INTERACTION':\r\n                    return Object.assign({}, state, payload);\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawInitializeLayer: () => ({dispatch, store}) => {\r\n        dispatch({type: 'DRAW_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n        const map = store.selectMap();\r\n        const source = new VectorSource();\r\n        const layer = new VectorLayer({\r\n            source: source\r\n        })\r\n        const drawPoints = new Draw({\r\n            source: source,\r\n            type: 'Point'\r\n        })\r\n        const drawLines = new Draw({\r\n            source: source,\r\n            type: 'LineString'\r\n        })\r\n        const drawPolygons = new Draw({\r\n            source: source,\r\n            type: 'Polygon'\r\n        })\r\n        map.addLayer(layer);\r\n        dispatch({\r\n            type: 'DRAW_INITIALIZE_FINISHED',\r\n            payload:{\r\n                layer: layer,\r\n                drawPoints: drawPoints,\r\n                drawLines: drawLines,\r\n                drawPolygons: drawPolygons\r\n            }\r\n        })\r\n    },\r\n    doDrawAddInteraction: (interaction) => ({dispatch, store}) =>{\r\n        const map = store.selectMap();\r\n        const activeInteraction = store.selectDrawActiveInteraction();\r\n        let newInteraction = null;\r\n        map.removeInteraction(activeInteraction)\r\n        if(interaction!==activeInteraction){\r\n            map.addInteraction(interaction);\r\n            newInteraction = interaction;\r\n        } \r\n        dispatch({\r\n            type: 'DRAW_ADD_INTERACTION',\r\n            payload:{\r\n                activeInteraction: newInteraction\r\n            }\r\n        })\r\n    },\r\n    selectDrawLayer: (state) => {\r\n        return state.draw.layer;\r\n    },\r\n    selectDrawPoints: (state) => {\r\n        return state.draw.drawPoints;\r\n    },\r\n    selectDrawLines: (state) => {\r\n        return state.draw.drawLines;\r\n    },\r\n    selectDrawPolygons: (state) => {\r\n        return state.draw.drawPolygons;\r\n    },\r\n    selectDrawActiveInteraction: (state) => {\r\n        return state.draw.activeInteraction;\r\n    },\r\n    reactDrawShouldInitialize: (state) => {\r\n        if(state.draw.shouldInitalize) return { actionCreator: 'doDrawInitializeLayer'}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}