{"ast":null,"code":"var Store = function Store(dbName, storeName) {\n  if (dbName === void 0) dbName = 'keyval-store';\n  if (storeName === void 0) storeName = 'keyval';\n  this.storeName = storeName;\n  this._dbp = new Promise(function (resolve, reject) {\n    var openreq = indexedDB.open(dbName, 1);\n\n    openreq.onerror = function () {\n      return reject(openreq.error);\n    };\n\n    openreq.onsuccess = function () {\n      return resolve(openreq.result);\n    };\n\n    openreq.onupgradeneeded = function () {\n      openreq.result.createObjectStore(storeName);\n    };\n  });\n};\n\nStore.prototype._withIDBStore = function _withIDBStore(type, callback) {\n  var this$1 = this;\n  return this._dbp.then(function (db) {\n    return new Promise(function (resolve, reject) {\n      var transaction = db.transaction(this$1.storeName, type);\n\n      transaction.oncomplete = function () {\n        return resolve();\n      };\n\n      transaction.onabort = transaction.onerror = function () {\n        return reject(transaction.error);\n      };\n\n      callback(transaction.objectStore(this$1.storeName));\n    });\n  });\n};\n\nvar store;\n\nfunction getDefaultStore() {\n  if (!store) {\n    store = new Store();\n  }\n\n  return store;\n}\n\nfunction get(key, store) {\n  if (store === void 0) store = getDefaultStore();\n  var req;\n  return store._withIDBStore('readonly', function (store) {\n    req = store.get(key);\n  }).then(function () {\n    return req.result;\n  });\n}\n\nfunction set(key, value, store) {\n  if (store === void 0) store = getDefaultStore();\n  return store._withIDBStore('readwrite', function (store) {\n    store.put(value, key);\n  });\n}\n\nfunction del(key, store) {\n  if (store === void 0) store = getDefaultStore();\n  return store._withIDBStore('readwrite', function (store) {\n    store.delete(key);\n  });\n}\n\nfunction clear(store) {\n  if (store === void 0) store = getDefaultStore();\n  return store._withIDBStore('readwrite', function (store) {\n    store.clear();\n  });\n}\n\nfunction keys(store) {\n  if (store === void 0) store = getDefaultStore();\n  var keys = [];\n  return store._withIDBStore('readonly', function (store) {\n    (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\n      if (!this.result) {\n        return;\n      }\n\n      keys.push(this.result.key);\n      this.result.continue();\n    };\n  }).then(function () {\n    return keys;\n  });\n}\n\nvar idbKeyVal = {\n  Store: Store,\n  get: get,\n  set: set,\n  del: del,\n  clear: clear,\n  keys: keys\n};\nvar del$1 = del;\nvar defaultOpts = {\n  maxAge: Infinity,\n  version: 0,\n  lib: idbKeyVal\n};\n\nvar getOpts = function (passedOptions) {\n  return Object.assign({}, defaultOpts, passedOptions);\n};\n\nvar get$1 = function (key, opts, store) {\n  var ref = getOpts(opts);\n  var maxAge = ref.maxAge;\n  var version = ref.version;\n  var lib = ref.lib;\n  return lib.get(key, store).then(JSON.parse).then(function (parsed) {\n    var age = Date.now() - parsed.time;\n\n    if (age > maxAge || version !== parsed.version) {\n      lib.del(key, store);\n      return null;\n    }\n\n    return parsed.data;\n  }).catch(function () {\n    return null;\n  });\n};\n\nvar set$1 = function (key, data, spec, store) {\n  var ref = getOpts(spec);\n  var lib = ref.lib;\n  var version = ref.version;\n  return lib.set(key, JSON.stringify({\n    version: version,\n    time: Date.now(),\n    data: data\n  }), store).catch(function () {\n    return null;\n  });\n};\n\nvar getAll = function (spec, store) {\n  var opts = getOpts(spec);\n  var keys$$1;\n  return opts.lib.keys(store).then(function (retrievedKeys) {\n    keys$$1 = retrievedKeys;\n    return Promise.all(keys$$1.map(function (key) {\n      return get$1(key, opts, store);\n    }));\n  }).then(function (data) {\n    return data.reduce(function (acc, bundleData, index) {\n      if (bundleData) {\n        acc[keys$$1[index]] = bundleData;\n      }\n\n      return acc;\n    }, {});\n  }).catch(function () {});\n};\n\nvar getConfiguredCache = function (spec) {\n  var opts = getOpts(spec);\n  var store;\n\n  if (opts.name) {\n    store = new Store(opts.name, opts.name);\n  }\n\n  return {\n    get: function (key) {\n      return get$1(key, opts, store);\n    },\n    set: function (key, val) {\n      return set$1(key, val, opts, store);\n    },\n    getAll: function () {\n      return getAll(opts, store);\n    },\n    del: function (key) {\n      return opts.lib.del(key, store);\n    },\n    clear: function () {\n      return opts.lib.clear(store);\n    },\n    keys: function () {\n      return opts.lib.keys(store);\n    }\n  };\n};\n\nexport { del$1 as del, get$1 as get, set$1 as set, getAll, getConfiguredCache };","map":null,"metadata":{},"sourceType":"module"}