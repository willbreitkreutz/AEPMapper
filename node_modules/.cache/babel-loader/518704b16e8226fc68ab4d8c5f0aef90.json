{"ast":null,"code":"import VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nimport Modify from 'ol/interaction/Modify';\nimport Select from 'ol/interaction/Select';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Circle from 'ol/style/Circle';\nimport { debounce } from 'lodash';\nexport default {\n  name: 'draw',\n  getReducer: () => {\n    const initialData = {\n      layer: null,\n      shouldInitalize: false,\n      drawPoints: null,\n      drawLines: null,\n      drawPolygons: null,\n      modify: null,\n      select: null,\n      fillColor: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.5)\"),\n      strokeColor: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.9)\"),\n      circleFillColor: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.5)\"),\n      circleStrokeColor: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.9)\"),\n      strokeWidth: 3,\n      circleStrokeWidth: 3,\n      circleRadius: 7,\n      activeInteraction: null\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_INITIALIZE_STARTED':\n        case 'DRAW_INITIALIZE_FINISHED':\n        case 'DRAW_ADD_INTERACTION':\n          return Object.assign({}, state, payload);\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawInitializeLayer: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'DRAW_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap();\n    const styleSettings = store.selectDrawStyleSettings();\n    const source = new VectorSource();\n    source.on('addfeature', store.doDrawDataHandleAdd);\n    source.on('removefeature', store.doDrawDataHandleRemove);\n    source.on('changefeature', debounce(store.doDrawDataHandleChange, 200));\n    const layer = new VectorLayer({\n      source: source,\n      zIndex: 10,\n      style: new Style({\n        fill: new Fill({\n          color: styleSettings.fillColor\n        }),\n        stroke: new Stroke({\n          width: styleSettings.strokeWidth,\n          color: styleSettings.strokeColor\n        }),\n        image: new Circle({\n          radius: styleSettings.circleRadius,\n          fill: new Fill({\n            color: styleSettings.circleFillColor\n          }),\n          stroke: new Stroke({\n            width: styleSettings.circleStrokeWidth,\n            color: styleSettings.circleStrokeColor\n          })\n        })\n      })\n    });\n    const drawPoints = new Draw({\n      source: source,\n      type: 'Point'\n    });\n    const drawLines = new Draw({\n      source: source,\n      type: 'LineString'\n    });\n    const drawPolygons = new Draw({\n      source: source,\n      type: 'Polygon'\n    });\n    const modify = new Modify({\n      source: source\n    });\n    const select = new Select({\n      layers: [layer]\n    });\n    map.addLayer(layer); //map.addInteraction(modify);\n\n    dispatch({\n      type: 'DRAW_INITIALIZE_FINISHED',\n      payload: {\n        layer: layer,\n        drawPoints: drawPoints,\n        drawLines: drawLines,\n        drawPolygons: drawPolygons,\n        modify: modify,\n        select: select\n      }\n    });\n  },\n  doDrawAddInteraction: interaction => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap();\n    const select = store.selectDrawSelect();\n    select.getFeatures().clear();\n    const activeInteraction = store.selectDrawActiveInteraction();\n    let newInteraction = null;\n    map.removeInteraction(activeInteraction);\n\n    if (interaction !== activeInteraction) {\n      map.addInteraction(interaction);\n      newInteraction = interaction;\n    }\n\n    dispatch({\n      type: 'DRAW_ADD_INTERACTION',\n      payload: {\n        activeInteraction: newInteraction\n      }\n    });\n  },\n  doDrawDeleteSelectedFeatures: () => ({\n    dispatch,\n    store\n  }) => {\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource();\n    const select = store.selectDrawSelect();\n    const features = select.getFeatures();\n    features.forEach(feature => {\n      source.removeFeature(feature);\n    });\n    features.clear();\n  },\n  selectDrawLayer: state => {\n    return state.draw.layer;\n  },\n  selectDrawPoints: state => {\n    return state.draw.drawPoints;\n  },\n  selectDrawLines: state => {\n    return state.draw.drawLines;\n  },\n  selectDrawPolygons: state => {\n    return state.draw.drawPolygons;\n  },\n  selectModify: state => {\n    return state.draw.modify;\n  },\n  selectDrawSelect: state => {\n    return state.draw.select;\n  },\n  selectDrawActiveInteraction: state => {\n    return state.draw.activeInteraction;\n  },\n  selectDrawStyleSettings: state => {\n    return {\n      fillColor: state.draw.fillColor,\n      strokeColor: state.draw.strokeColor,\n      strokeWidth: state.draw.strokeWidth,\n      radius: state.draw.circleRadius,\n      circleStrokeWidth: state.draw.circleStrokeWidth,\n      circleFillColor: state.draw.circleFillColor,\n      circleStrokeColor: state.draw.circleStrokeColor\n    };\n  },\n  reactDrawShouldInitialize: state => {\n    if (state.draw.shouldInitalize) return {\n      actionCreator: 'doDrawInitializeLayer'\n    };\n  },\n  init: store => {\n    window.addEventListener('keyup', e => {\n      if (e.keyCode === 8 || e.keyCode === 46) {\n        store.doDrawDeleteSelectedFeatures();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\draw-bundle.js"],"names":["VectorLayer","VectorSource","Draw","Modify","Select","Style","Fill","Stroke","Circle","debounce","name","getReducer","initialData","layer","shouldInitalize","drawPoints","drawLines","drawPolygons","modify","select","fillColor","Math","random","strokeColor","circleFillColor","circleStrokeColor","strokeWidth","circleStrokeWidth","circleRadius","activeInteraction","state","type","payload","Object","assign","doDrawInitializeLayer","dispatch","store","map","selectMap","styleSettings","selectDrawStyleSettings","source","on","doDrawDataHandleAdd","doDrawDataHandleRemove","doDrawDataHandleChange","zIndex","style","fill","color","stroke","width","image","radius","layers","addLayer","doDrawAddInteraction","interaction","selectDrawSelect","getFeatures","clear","selectDrawActiveInteraction","newInteraction","removeInteraction","addInteraction","doDrawDeleteSelectedFeatures","selectDrawLayer","getSource","features","forEach","feature","removeFeature","draw","selectDrawPoints","selectDrawLines","selectDrawPolygons","selectModify","reactDrawShouldInitialize","actionCreator","init","window","addEventListener","e","keyCode"],"mappings":"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","sourcesContent":["import VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport Modify from 'ol/interaction/Modify';\r\nimport Select from 'ol/interaction/Select';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Circle from 'ol/style/Circle';\r\nimport {debounce} from 'lodash';\r\n\r\nexport default {\r\n    name: 'draw',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            layer: null,\r\n            shouldInitalize: false,\r\n            drawPoints: null,\r\n            drawLines: null,\r\n            drawPolygons: null,\r\n            modify:null,\r\n            select:null,\r\n            fillColor:`rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.5)`,\r\n            strokeColor:`rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.9)`,\r\n            circleFillColor:`rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.5)`,\r\n            circleStrokeColor:`rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.9)`,\r\n            strokeWidth:3,\r\n            circleStrokeWidth:3,\r\n            circleRadius:7,\r\n            activeInteraction: null\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_INITIALIZE_STARTED':\r\n                case  'DRAW_INITIALIZE_FINISHED':\r\n                case  'DRAW_ADD_INTERACTION':\r\n                    return Object.assign({}, state, payload);\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawInitializeLayer: () => ({dispatch, store}) => {\r\n        dispatch({type: 'DRAW_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n        const map = store.selectMap();\r\n        const styleSettings = store.selectDrawStyleSettings();\r\n        const source = new VectorSource();\r\n        source.on('addfeature', store.doDrawDataHandleAdd);\r\n        source.on('removefeature', store.doDrawDataHandleRemove);\r\n        source.on('changefeature', debounce(store.doDrawDataHandleChange,200));\r\n        const layer = new VectorLayer({\r\n            source: source,\r\n            zIndex: 10,\r\n            style: new Style({\r\n                fill: new Fill({\r\n                    color: styleSettings.fillColor\r\n                }),\r\n                stroke: new Stroke({\r\n                    width: styleSettings.strokeWidth,\r\n                    color: styleSettings.strokeColor\r\n                }),\r\n                image: new Circle({\r\n                    radius: styleSettings.circleRadius,\r\n                    fill: new Fill({\r\n                        color: styleSettings.circleFillColor\r\n                    }),\r\n                    stroke: new Stroke({\r\n                        width: styleSettings.circleStrokeWidth,\r\n                        color: styleSettings.circleStrokeColor\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        const drawPoints = new Draw({\r\n            source: source,\r\n            type: 'Point'\r\n        })\r\n        const drawLines = new Draw({\r\n            source: source,\r\n            type: 'LineString'\r\n        })\r\n        const drawPolygons = new Draw({\r\n            source: source,\r\n            type: 'Polygon'\r\n        })\r\n        const modify = new Modify({\r\n            source: source\r\n        })\r\n        const select = new Select({\r\n            layers: [layer]\r\n        })\r\n        map.addLayer(layer);\r\n        //map.addInteraction(modify);\r\n        dispatch({\r\n            type: 'DRAW_INITIALIZE_FINISHED',\r\n            payload:{\r\n                layer: layer,\r\n                drawPoints: drawPoints,\r\n                drawLines: drawLines,\r\n                drawPolygons: drawPolygons,\r\n                modify: modify,\r\n                select: select\r\n            }\r\n        })\r\n    },\r\n    doDrawAddInteraction: (interaction) => ({dispatch, store}) =>{\r\n        const map = store.selectMap();\r\n        const select = store.selectDrawSelect();\r\n        select.getFeatures().clear();\r\n        const activeInteraction = store.selectDrawActiveInteraction();\r\n        let newInteraction = null;\r\n        map.removeInteraction(activeInteraction)\r\n        if(interaction!==activeInteraction){\r\n            map.addInteraction(interaction);\r\n            newInteraction = interaction;\r\n        } \r\n        dispatch({\r\n            type: 'DRAW_ADD_INTERACTION',\r\n            payload:{\r\n                activeInteraction: newInteraction\r\n            }\r\n        })\r\n    },\r\n    doDrawDeleteSelectedFeatures:() =>({dispatch, store}) =>{\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n        const select = store.selectDrawSelect();\r\n        const features = select.getFeatures();\r\n        features.forEach((feature)=>{\r\n            source.removeFeature(feature);\r\n        })\r\n        features.clear();\r\n    },\r\n\r\n    selectDrawLayer: (state) => {\r\n        return state.draw.layer;\r\n    },\r\n    selectDrawPoints: (state) => {\r\n        return state.draw.drawPoints;\r\n    },\r\n    selectDrawLines: (state) => {\r\n        return state.draw.drawLines;\r\n    },\r\n    selectDrawPolygons: (state) => {\r\n        return state.draw.drawPolygons;\r\n    },\r\n    selectModify: (state) => {\r\n        return state.draw.modify;\r\n    },\r\n    selectDrawSelect: (state) => {\r\n        return state.draw.select;\r\n    },\r\n    selectDrawActiveInteraction: (state) => {\r\n        return state.draw.activeInteraction;\r\n    },\r\n    selectDrawStyleSettings:(state) =>{\r\n        return {\r\n            fillColor: state.draw.fillColor,\r\n            strokeColor: state.draw.strokeColor,\r\n            strokeWidth:state.draw.strokeWidth,\r\n            radius:state.draw.circleRadius,\r\n            circleStrokeWidth: state.draw.circleStrokeWidth,\r\n            circleFillColor: state.draw.circleFillColor,\r\n            circleStrokeColor: state.draw.circleStrokeColor\r\n        }\r\n\r\n    },\r\n    reactDrawShouldInitialize: (state) => {\r\n        if(state.draw.shouldInitalize) return { actionCreator: 'doDrawInitializeLayer'}\r\n    },\r\n    init: (store) =>{\r\n        window.addEventListener('keyup', (e) =>{\r\n            if(e.keyCode === 8 || e.keyCode === 46){\r\n                store.doDrawDeleteSelectedFeatures();\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}