{"ast":null,"code":"import 'ol/ol.css';\nimport Map from 'ol/Map';\nimport TileLayer from 'ol/layer/Tile';\nimport View from 'ol/View';\nimport XYZ from 'ol/source/XYZ';\nimport { getSource } from '@corpsmap/corpsmap-bundles/utils/layer-utils';\nimport { getLayer } from '@corpsmap/corpsmap-bundles/utils/layer-utils';\nexport default {\n  name: 'draw',\n  getReducer: () => {\n    const initialData = {\n      shouldInitalize: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_INITIALIZE_STARTED':\n        case 'DRAW_INITIALIZE_FINISHED':\n          return Object.assign({}, state, payload);\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawInitializeLayer: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'DRAW_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap(); //replace this with a service from the PFRA AEP grid data - then we can have a view of the AEP grids.\n\n    const lyr = getLayer({\n      serviceType: 'ArcGIS',\n      url: \"https://basemap.nationalmap.gov/ArcGIS/rest/services/USGSTopo/MapServer\"\n    });\n    map.addLayer(lyr); //map.removeLayer(map.getLayers()[0])\n    //map.getLayers().insertAt(0, wms);;\n\n    dispatch({\n      type: 'DRAW_INITIALIZE_FINISHED'\n    });\n  },\n  reactDrawShouldInitialize: state => {\n    if (state.draw.shouldInitalize) return {\n      actionCreator: 'doDrawInitializeLayer'\n    };\n  },\n  init: store => {}\n};","map":{"version":3,"sources":["C:\\Examples\\aepmapper\\src\\app-bundles\\draw-bundle.js"],"names":["Map","TileLayer","View","XYZ","getSource","getLayer","name","getReducer","initialData","shouldInitalize","state","type","payload","Object","assign","doDrawInitializeLayer","dispatch","store","map","selectMap","lyr","serviceType","url","addLayer","reactDrawShouldInitialize","draw","actionCreator","init"],"mappings":"AACA,OAAO,WAAP;AACA,OAAOA,GAAP,MAAgB,QAAhB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,SAAQC,SAAR,QAAwB,8CAAxB;AACA,SAAQC,QAAR,QAAuB,8CAAvB;AAEA,eAAe;AACXC,EAAAA,IAAI,EAAE,MADK;AAEXC,EAAAA,UAAU,EAAC,MAAK;AACZ,UAAMC,WAAW,GAAG;AAChBC,MAAAA,eAAe,EAAE;AADD,KAApB;AAGA,WAAO,CAACC,KAAK,GAAGF,WAAT,EAAsB;AAACG,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAtB,KAA0C;AAC7C,cAAOD,IAAP;AACI,aAAK,yBAAL;AACA,aAAK,0BAAL;AACI,iBAAOE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyBE,OAAzB,CAAP;;AACJ,aAAK,iBAAL;AACI,iBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC5BD,YAAAA,eAAe,EAAE;AADW,WAAzB,CAAP;;AAGJ;AACI,iBAAOC,KAAP;AATR;AAWH,KAZD;AAaH,GAnBU;AAoBXK,EAAAA,qBAAqB,EAAE,MAAM,CAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAD,KAAuB;AAChDD,IAAAA,QAAQ,CAAC;AAACL,MAAAA,IAAI,EAAE,yBAAP;AAAkCC,MAAAA,OAAO,EAAE;AAACH,QAAAA,eAAe,EAAE;AAAlB;AAA3C,KAAD,CAAR;AACA,UAAMS,GAAG,GAAGD,KAAK,CAACE,SAAN,EAAZ,CAFgD,CAGhD;;AACA,UAAMC,GAAG,GAAGf,QAAQ,CAAC;AACjBgB,MAAAA,WAAW,EAAE,QADI;AAEjBC,MAAAA,GAAG,EAAE;AAFY,KAAD,CAApB;AAIAJ,IAAAA,GAAG,CAACK,QAAJ,CAAaH,GAAb,EARgD,CAShD;AACA;;AACAJ,IAAAA,QAAQ,CAAC;AACLL,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH,GAlCU;AAmCXa,EAAAA,yBAAyB,EAAGd,KAAD,IAAW;AAClC,QAAGA,KAAK,CAACe,IAAN,CAAWhB,eAAd,EAA+B,OAAO;AAAEiB,MAAAA,aAAa,EAAE;AAAjB,KAAP;AAClC,GArCU;AAsCXC,EAAAA,IAAI,EAAGV,KAAD,IAAU,CAEf;AAxCU,CAAf","sourcesContent":["\r\nimport 'ol/ol.css';\r\nimport Map from 'ol/Map';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport View from 'ol/View';\r\nimport XYZ from 'ol/source/XYZ';\r\nimport {getSource} from '@corpsmap/corpsmap-bundles/utils/layer-utils'\r\nimport {getLayer} from '@corpsmap/corpsmap-bundles/utils/layer-utils'\r\n\r\nexport default {\r\n    name: 'draw',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            shouldInitalize: false,\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_INITIALIZE_STARTED':\r\n                case 'DRAW_INITIALIZE_FINISHED':\r\n                    return Object.assign({}, state, payload);\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawInitializeLayer: () => ({dispatch, store}) => {\r\n        dispatch({type: 'DRAW_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n        const map = store.selectMap();\r\n        //replace this with a service from the PFRA AEP grid data - then we can have a view of the AEP grids.\r\n        const lyr = getLayer({\r\n            serviceType: 'ArcGIS',\r\n            url: \"https://basemap.nationalmap.gov/ArcGIS/rest/services/USGSTopo/MapServer\"\r\n        })\r\n        map.addLayer(lyr)\r\n        //map.removeLayer(map.getLayers()[0])\r\n        //map.getLayers().insertAt(0, wms);;\r\n        dispatch({\r\n            type: 'DRAW_INITIALIZE_FINISHED'\r\n        })\r\n    },\r\n    reactDrawShouldInitialize: (state) => {\r\n        if(state.draw.shouldInitalize) return { actionCreator: 'doDrawInitializeLayer'}\r\n    },\r\n    init: (store) =>{\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}