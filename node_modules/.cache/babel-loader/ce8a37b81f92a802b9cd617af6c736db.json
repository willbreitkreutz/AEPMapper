{"ast":null,"code":"import olMap from 'ol/Map.js';\nimport View from 'ol/View';\nimport { get, transform, fromLonLat, transformExtent } from 'ol/proj';\nimport ScaleBar from 'ol/control/ScaleLine';\nimport { debounce } from 'lodash';\nimport 'ol/ol.css';\nexport default (opts => {\n  const defaults = {\n    name: 'map',\n    center: [-98.579, 39.828],\n    zoom: 5,\n    rotation: 0,\n    minZoom: 0,\n    maxZoom: 22\n  };\n  const config = Object.assign({}, defaults, opts);\n  return {\n    name: config.name,\n    getReducer: () => {\n      const initialState = {\n        map: null,\n        geoProjection: get('EPSG:4326'),\n        webProjection: get('EPSG:3857'),\n        center: config.center,\n        zoom: config.zoom,\n        rotation: config.rotation,\n        minZoom: config.minZoom,\n        maxZoom: config.maxZoom,\n        shouldInitialize: false,\n        shouldResetViewState: false,\n        shouldUpdateViewState: false\n      };\n      return (state = initialState, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case 'MAP_INITIALIZED':\n          case 'MAP_RESET_MAP_VIEW':\n          case 'MAP_UPDATED_VIEW_STATE_STARTED':\n          case 'MAP_UPDATED_VIEW_STATE_FINISHED':\n            return Object.assign({}, state, payload);\n\n          default:\n            return state;\n        }\n      };\n    },\n    doMapInitialize: el => ({\n      dispatch,\n      store\n    }) => {\n      const geoProjection = store.selectMapGeoProjection();\n      const webProjection = store.selectMapWebProjection();\n      const center = store.selectMapCenter();\n      const zoom = store.selectMapZoom();\n      const rotation = store.selectMapRotation();\n      const minZoom = store.selectMapMinZoom();\n      const maxZoom = store.selectMapMaxZoom();\n      const view = new View({\n        center: transform(center, geoProjection, webProjection),\n        zoom: zoom,\n        rotation: rotation,\n        minZoom: minZoom,\n        maxZoom: maxZoom\n      });\n      const map = new olMap({\n        controls: [new ScaleBar({\n          units: 'us'\n        })],\n        target: el,\n        view: view\n      });\n      map.on('moveend', debounce(store.doMapUpdateViewState, 200));\n      dispatch({\n        type: 'MAP_INITIALIZED',\n        payload: {\n          map: map\n        }\n      });\n    },\n    doMapUpdateSize: () => ({\n      dispatch,\n      store\n    }) => {\n      const map = store.selectMap();\n      if (map) map.updateSize();\n    },\n    doMapUpdateViewState: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'MAP_UPDATED_VIEW_STATE_STARTED',\n        payload: {\n          shouldUpdateViewState: false\n        }\n      });\n      const epsg4326 = store.selectMapGeoProjection();\n      const epsg3857 = store.selectMapWebProjection();\n      const map = store.selectMap();\n      const view = map.getView();\n      const center = transform(view.getCenter(), epsg3857, epsg4326);\n      const rotation = view.getRotation();\n      const zoom = view.getZoom();\n      const minZoom = view.getMinZoom();\n      const maxZoom = view.getMaxZoom();\n      dispatch({\n        type: 'MAP_UPDATED_VIEW_STATE_FINISHED',\n        payload: {\n          center: center,\n          rotation: rotation,\n          zoom: zoom,\n          minZoom: minZoom,\n          maxZoom: maxZoom\n        }\n      });\n    },\n    doMapResetViewState: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'MAP_RESET_MAP_VIEW',\n        payload: {\n          shouldResetViewState: false\n        }\n      });\n      const center = config.center,\n            zoom = config.zoom,\n            rotation = config.rotation;\n      const map = store.selectMap();\n      const view = map.getView();\n      const geoProjection = store.selectMapGeoProjection();\n      const webProjection = store.selectMapWebProjection();\n      view.animate({\n        center: transform(center, geoProjection, webProjection),\n        zoom: zoom,\n        rotation: rotation\n      }, 200);\n    },\n    doMapZoomTo: (lonLat, z) => ({\n      store\n    }) => {\n      const map = store.selectMap();\n      const view = map.getView();\n      view.animate({\n        zoom: z || 10,\n        center: fromLonLat(lonLat)\n      });\n    },\n    selectMap: state => {\n      return state.map.map;\n    },\n    selectMapGeoProjection: state => {\n      return state.map.geoProjection;\n    },\n    selectMapWebProjection: state => {\n      return state.map.webProjection;\n    },\n    selectMapCenter: state => {\n      return state.map.center;\n    },\n    selectMapZoom: state => {\n      return state.map.zoom;\n    },\n    selectMapRotation: state => {\n      return state.map.rotation;\n    },\n    selectMapMinZoom: state => {\n      return state.map.minZoom;\n    },\n    selectMapMaxZoom: state => {\n      return state.map.maxZoom;\n    },\n    reactMapShouldResetViewState: state => {\n      if (state.map.shouldResetViewState) return {\n        actionCreator: 'doMapResetViewState'\n      };\n    },\n    reactMapShouldUpdateViewState: state => {\n      if (state.map.shouldUpdateViewState) return {\n        actionCreator: 'doMapUpdateViewState'\n      };\n    },\n    init: store => {\n      window.addEventListener('resize', store.doMapUpdateSize);\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}