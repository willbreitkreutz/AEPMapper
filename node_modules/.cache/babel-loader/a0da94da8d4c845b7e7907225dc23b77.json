{"ast":null,"code":"/**\n * @module ol/source/Image\n */\nimport { abstract } from '../util.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport ImageState from '../ImageState.js';\nimport { linearFindNearest } from '../array.js';\nimport Event from '../events/Event.js';\nimport { equals } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\n/**\n * @enum {string}\n */\n\nvar ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event ol/source/Image~ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event ol/source/Image~ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\n\nvar ImageSourceEvent =\n/*@__PURE__*/\nfunction (Event) {\n  function ImageSourceEvent(type, image) {\n    Event.call(this, type);\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n\n    this.image = image;\n  }\n\n  if (Event) ImageSourceEvent.__proto__ = Event;\n  ImageSourceEvent.prototype = Object.create(Event && Event.prototype);\n  ImageSourceEvent.prototype.constructor = ImageSourceEvent;\n  return ImageSourceEvent;\n}(Event);\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {import(\"../proj.js\").ProjectionLike} projection\n * @property {Array<number>} [resolutions]\n * @property {import(\"./State.js\").default} [state]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @api\n */\n\n\nvar ImageSource =\n/*@__PURE__*/\nfunction (Source) {\n  function ImageSource(options) {\n    Source.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state\n    });\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n\n    this.reprojectedImage_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.reprojectedRevision_ = 0;\n  }\n\n  if (Source) ImageSource.__proto__ = Source;\n  ImageSource.prototype = Object.create(Source && Source.prototype);\n  ImageSource.prototype.constructor = ImageSource;\n  /**\n   * @return {Array<number>} Resolutions.\n   * @override\n   */\n\n  ImageSource.prototype.getResolutions = function getResolutions() {\n    return this.resolutions_;\n  };\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n\n\n  ImageSource.prototype.findNearestResolution = function findNearestResolution(resolution) {\n    if (this.resolutions_) {\n      var idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n\n    return resolution;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   */\n\n\n  ImageSource.prototype.getImage = function getImage(extent, resolution, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {\n          return this.reprojectedImage_;\n        }\n\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {\n        return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);\n      }.bind(this));\n      this.reprojectedRevision_ = this.getRevision();\n      return this.reprojectedImage_;\n    }\n  };\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   * @protected\n   */\n\n\n  ImageSource.prototype.getImageInternal = function getImageInternal(extent, resolution, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n\n\n  ImageSource.prototype.handleImageChange = function handleImageChange(event) {\n    var image =\n    /** @type {import(\"../Image.js\").default} */\n    event.target;\n\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));\n        break;\n\n      case ImageState.LOADED:\n        this.loading = false;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));\n        break;\n\n      case ImageState.ERROR:\n        this.loading = false;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));\n        break;\n\n      default: // pass\n\n    }\n  };\n\n  return ImageSource;\n}(Source);\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\n\n\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */\n  image.getImage().src = src;\n}\nexport default ImageSource;","map":null,"metadata":{},"sourceType":"module"}