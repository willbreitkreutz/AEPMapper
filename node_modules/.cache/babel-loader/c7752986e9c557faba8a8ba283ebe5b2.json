{"ast":null,"code":"import { transform } from 'ol/proj';\nimport census from 'citysdk';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { tsExternalModuleReference } from '@babel/types';\nimport turf from '@turf/turf';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'selectByFips',\n  getReducer: () => {\n    const initialData = {\n      selectByFipsIsActive: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'SELECT_BY_FIPS_ACTIVATED':\n        case 'SELECT_BY_FIPS_DEACTIVATED':\n          return Object.assign({}, state, payload);\n\n        case 'SELECT_BY_FIPS_STARTED':\n        case 'SELECT_BY_FIPS_GET_FIPS':\n        case 'SELECT_BY_FIPS_GET_STATS':\n        case 'SELECT_BY_FIPS_FINISHED':\n        default:\n          return state;\n      }\n    };\n  },\n  doSelectByFips: e => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: \"SELECT_BY_FIPS_STARTED\"\n    });\n    var statsKeyStore = store.selectCitysdkStatsKey();\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource(); //it seems like i refactored, but i dont remember what I did. this looks like a click handler \n    //e is now undef - so i probably need to assign a click and properly remove it.\n\n    var coord = transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');\n    var coord = turf.within(coord, layer.features);\n\n    if (!coord) {\n      //use turf to see if layer already contains the point (or go through the feature attributes to see if the fips already has been clicked.)\n      dispatch({\n        type: \"SELECT_BY_FIPS_GET_FIPS\"\n      }); //need to parralell fetch stats from the nsi api\n\n      census({\n        \"vintage\": 2015,\n        // required\n        \"geoHierarchy\": {\n          // required\n          \"state\": {\n            \"lat\": coord[1],\n            \"lng\": coord[0]\n          }\n        }\n      }, (err, res) => {\n        if (err) {} else {}\n\n        dispatch({\n          type: 'SELECT_BY_FIPS_STARTED'\n        });\n        census({\n          \"vintage\": \"2015\",\n          \"geoHierarchy\": {\n            \"state\": res.geoHierarchy.state //\"county\": res.geoHierarchy.county\n\n          },\n          \"sourcePath\": [\"acs\", \"acs5\"],\n          \"values\": [\"B19083_001E\"],\n          // GINI index             \n          \"statsKey\": statsKeyStore,\n          \"geoResolution\": \"5m\"\n        }, (err, res) => {\n          if (err) {} else {\n            const features = geoJSON.readFeatures(res, {\n              \"dataProjection\": 'EPSG:4326',\n              \"featureProjection\": 'EPSG:3857'\n            });\n            source.addFeatures(features);\n            dispatch({\n              type: 'SELECT_BY_FIPS_FINISHED'\n            });\n          }\n        });\n      });\n      dispatch({\n        type: \"SELECT_BY_FIPS_FINISHED\"\n      });\n    } else {\n      dispatch({\n        type: \"SELECT_BY_FIPS_FINISHED\"\n      });\n    }\n  },\n  doDrawToggleSelectState: () => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap(); //what if the active interaction is the select by fips?\n\n    if (store.selectSelectByFipsIsActive()) {\n      map.un(\"click\", store.doSelectByFips);\n      dispatch({\n        type: 'SELECT_BY_FIPS_DEACTIVATED',\n        payload: {\n          selectByFipsIsActive: false\n        }\n      });\n    } else {\n      map.on(\"click\", store.doSelectByFips);\n      dispatch({\n        type: 'SELECT_BY_FIPS_ACTIVATED',\n        payload: {\n          selectByFipsIsActive: true\n        }\n      });\n    }\n  },\n  selectSelectByFipsIsActive: state => {\n    return state.selectByFips.selectByFipsIsActive;\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\nsifrontend\\src\\app-bundles\\select-by-fips-bundle.js"],"names":["transform","census","GeoJSON","tsExternalModuleReference","turf","geoJSON","name","getReducer","initialData","selectByFipsIsActive","state","type","payload","Object","assign","doSelectByFips","e","dispatch","store","statsKeyStore","selectCitysdkStatsKey","layer","selectDrawLayer","source","getSource","coord","coordinate","within","features","err","res","geoHierarchy","readFeatures","addFeatures","doDrawToggleSelectState","map","selectMap","selectSelectByFipsIsActive","un","on","selectByFips"],"mappings":"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","sourcesContent":["import {transform} from 'ol/proj';\r\nimport census from 'citysdk';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { tsExternalModuleReference } from '@babel/types';\r\nimport turf from '@turf/turf';\r\nconst geoJSON = new GeoJSON();\r\n\r\n\r\nexport default {\r\n    name: 'selectByFips',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            selectByFipsIsActive: false,\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'SELECT_BY_FIPS_ACTIVATED':\r\n                case 'SELECT_BY_FIPS_DEACTIVATED':\r\n                return Object.assign({}, state, payload);\r\n                case 'SELECT_BY_FIPS_STARTED':\r\n                case 'SELECT_BY_FIPS_GET_FIPS':\r\n                case 'SELECT_BY_FIPS_GET_STATS':\r\n                case 'SELECT_BY_FIPS_FINISHED':\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doSelectByFips: (e) =>({dispatch, store}) =>{\r\n        dispatch({\r\n            type: \"SELECT_BY_FIPS_STARTED\"\r\n        })\r\n        var statsKeyStore = store.selectCitysdkStatsKey()\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n\r\n        //it seems like i refactored, but i dont remember what I did. this looks like a click handler \r\n        //e is now undef - so i probably need to assign a click and properly remove it.\r\n        var coord = transform(e.coordinate,'EPSG:3857','EPSG:4326')\r\n        \r\n        var coord = turf.within(coord, layer.features)\r\n        if(!coord){\r\n            //use turf to see if layer already contains the point (or go through the feature attributes to see if the fips already has been clicked.)\r\n            dispatch({\r\n                type: \"SELECT_BY_FIPS_GET_FIPS\"\r\n            })\r\n\r\n            //need to parralell fetch stats from the nsi api\r\n            census({\r\n                \"vintage\" : 2015,    // required\r\n                \"geoHierarchy\" : {   // required\r\n                    \"state\" : {\r\n                    \"lat\" : coord[1], \r\n                    \"lng\" : coord[0]\r\n                    }\r\n                }\r\n                }, \r\n                (err, res) => {\r\n                    if(err){\r\n\r\n                    }else{\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: 'SELECT_BY_FIPS_STARTED'\r\n                    })\r\n                    census({\r\n                        \"vintage\" : \"2015\",\r\n                        \"geoHierarchy\" : {\r\n                            \"state\": res.geoHierarchy.state,\r\n                            //\"county\": res.geoHierarchy.county\r\n                        },\r\n                        \"sourcePath\" : [\"acs\", \"acs5\"],  \r\n                        \"values\" : [\"B19083_001E\"],    // GINI index             \r\n                        \"statsKey\" : statsKeyStore,\r\n                        \"geoResolution\" : \"5m\"\r\n                    },\r\n                    (err, res) => {\r\n                        if(err){\r\n\r\n                        }else{\r\n                            const features = geoJSON.readFeatures(res,{\"dataProjection\" : 'EPSG:4326', \"featureProjection\":'EPSG:3857' });\r\n                            source.addFeatures(features);\r\n                            dispatch({\r\n                                type: 'SELECT_BY_FIPS_FINISHED'\r\n                            })\r\n                        }\r\n\r\n                    }\r\n                )\r\n            })\r\n            dispatch({\r\n                type: \"SELECT_BY_FIPS_FINISHED\"\r\n            })            \r\n        }else{\r\n            dispatch(\r\n                {\r\n                    type: \"SELECT_BY_FIPS_FINISHED\"\r\n                }\r\n            )\r\n        }\r\n            \r\n    },\r\n    doDrawToggleSelectState: () =>({dispatch, store}) =>{\r\n\r\n        const map = store.selectMap();\r\n        //what if the active interaction is the select by fips?\r\n        if (store.selectSelectByFipsIsActive()){\r\n            map.un(\"click\", store.doSelectByFips)\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_DEACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: false,\r\n                }\r\n            })\r\n        }else{\r\n            map.on(\"click\", store.doSelectByFips)\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_ACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: true,\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    ,\r\n    selectSelectByFipsIsActive: (state) =>{\r\n        return state.selectByFips.selectByFipsIsActive;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}