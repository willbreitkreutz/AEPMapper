{"ast":null,"code":"import { createSelector } from 'redux-bundler';\nimport xhr from 'xhr';\n\nconst getTokenPart = function (token, part) {\n  const splitToken = token.split('.');\n  return splitToken[part];\n};\n\nexport default (opts => {\n  const defaults = {\n    url: 'https://corpsmap-dev.sec.usace.army.mil/cwbi/auth/basic',\n    name: 'auth',\n    redirectOnLogout: null,\n    verifyInterval: 1000 * 60\n  };\n  const config = Object.assign({}, defaults, opts);\n  if (opts.appId) config.url = \"https://corpsmap-dev.sec.usace.army.mil/cwbi/auth/\".concat(opts.appId, \"/login\");\n  return {\n    name: config.name,\n    getReducer: () => {\n      const initialState = {\n        url: config.url,\n        token: null,\n        error: null,\n        shouldVerifyToken: false,\n        redirectOnLogout: config.redirectOnLogout\n      };\n      return (state = initialState, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case 'AUTH_LOGGED_IN':\n          case 'AUTH_LOGGED_OUT':\n          case 'AUTH_ERROR':\n          case 'AUTH_VERIFY_TOKEN':\n            return Object.assign({}, state, payload);\n\n          default:\n            return state;\n        }\n      };\n    },\n    doAuthLogin: () => ({\n      dispatch,\n      store\n    }) => {\n      const url = store.selectAuthUrl(); //@todo move to fetch api at some point\n\n      try {\n        xhr(url, (err, response, body) => {\n          if (err) {\n            throw new Error('Login Response not ok');\n          } else {\n            const token = JSON.parse(body);\n            dispatch({\n              type: 'AUTH_LOGGED_IN',\n              payload: {\n                token: token,\n                error: null,\n                shouldVerifyToken: true\n              }\n            });\n          }\n        });\n      } catch (err) {\n        if (process.env.NODE_ENV === 'development') console.error(err);\n        dispatch({\n          type: 'AUTH_ERROR',\n          payload: {\n            msg: 'Error Logging In',\n            err: err\n          }\n        });\n      }\n    },\n    doAuthLogout: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'AUTH_LOGGED_OUT',\n        payload: {\n          token: null,\n          error: null\n        }\n      });\n      const redirect = store.selectAuthRedirectOnLogout();\n      if (redirect) store.doUpdateUrl(redirect);\n    },\n    doAuthVerifyToken: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'AUTH_VERIFY_TOKEN',\n        payload: {\n          shouldVerifyToken: false\n        }\n      });\n      const isExpired = store.selectAuthTokenIsExpired();\n\n      if (isExpired) {\n        store.doAuthLogout();\n      } else {\n        window.setTimeout(store.doAuthVerifyToken, config.verifyInterval);\n      }\n    },\n    selectAuthRedirectOnLogout: state => {\n      return state.auth.redirectOnLogout;\n    },\n    selectAuthUrl: state => {\n      return state.auth.url;\n    },\n    // select parts of the token itself\n    selectAuthTokenRaw: state => {\n      return state.auth.token;\n    },\n    selectAuthTokenHeader: createSelector('selectAuthTokenRaw', token => {\n      if (!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 0)));\n    }),\n    selectAuthTokenPayload: createSelector('selectAuthTokenRaw', token => {\n      if (!token) return {};\n      return JSON.parse(window.atob(getTokenPart(token, 1)));\n    }),\n    // select info about token expiration\n    selectAuthTokenExp: createSelector('selectAuthTokenPayload', payload => {\n      if (!payload.hasOwnProperty('exp')) return null;\n      return payload.exp;\n    }),\n    selectAuthTokenIsExpired: createSelector('selectAuthTokenExp', exp => {\n      if (!exp) return true;\n      return exp < Math.floor(Date.now() / 1000);\n    }),\n    // select parts of the payload\n    selectAuthUsername: createSelector('selectAuthTokenPayload', payload => {\n      if (!payload.hasOwnProperty('username')) return null;\n      return payload.username;\n    }),\n    selectAuthEdipi: createSelector('selectAuthTokenPayload', payload => {\n      if (!payload.hasOwnProperty('edipi')) return null;\n      return payload.edipi;\n    }),\n    selectAuthRoles: createSelector('selectAuthTokenPayload', payload => {\n      if (!payload.hasOwnProperty('roles')) return [];\n      return payload.roles;\n    }),\n    selectAuthGroups: createSelector('selectAuthRoles', roles => {\n      return roles.map(role => {\n        return role[0];\n      });\n    }),\n    selectAuthGroupRoles: createSelector('selectAuthRoles', roles => {\n      const groupRoles = {};\n      roles.forEach(role => {\n        if (!groupRoles.hasOwnProperty(role[0])) groupRoles[role[0]] = [];\n        if (role[2].indexOf('APPROVED') !== -1) groupRoles[role[0]].push(role[1]);\n      });\n      return groupRoles;\n    }),\n    selectAuthIsLoggedIn: state => {\n      return !!state.auth.token;\n    },\n    reactAuthShouldVerifyToken: state => {\n      if (state.auth.shouldVerifyToken) return {\n        actionCreator: 'doAuthVerifyToken'\n      };\n    },\n    init: store => {\n      store.doAuthVerifyToken();\n    },\n    persistActions: ['AUTH_LOGGED_IN', 'AUTH_LOGGED_OUT']\n  };\n});","map":null,"metadata":{},"sourceType":"module"}