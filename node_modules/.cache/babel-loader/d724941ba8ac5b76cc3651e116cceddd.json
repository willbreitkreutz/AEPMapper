{"ast":null,"code":"import Sockette from 'sockette';\nexport default (opts => {\n  const defaults = {\n    name: 'websocket',\n    url: null,\n    timeout: 5000,\n    maxAttempts: 10\n  };\n  const config = Object.assign({}, defaults, opts);\n  return {\n    name: config.name,\n    getReducer: () => {\n      const initialData = {\n        ws: null,\n        shouldInitialize: true\n      };\n      return (state = initialData, {\n        type,\n        payload\n      }) => {\n        switch (type) {\n          case 'WEBSOCKET_INITIALIZE_STARTED':\n          case 'WEBSOCKET_INITIALIZE_FINISHED':\n          case 'WEBSOCKET_OPEN':\n          case 'WEBSOCKET_MESSAGE':\n          case 'WEBSOCKET_CLOSE':\n          case 'WEBSOCKET_RECONNECT':\n          case 'WEBSOCKET_ERROR':\n            return Object.assign({}, state, payload);\n\n          default:\n            return state;\n        }\n      };\n    },\n    doWebsocketInitialize: () => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'WEBSOCKET_INITIALIZE_STARTED',\n        payload: {\n          shouldInitialize: false\n        }\n      });\n      const ws = new Sockette(config.url, {\n        timeout: config.timeout,\n        maxAttempts: config.maxAttempts,\n        onopen: store.doWebsocketHandleConnect,\n        onmessage: store.doWebsocketHandleMessage,\n        onreconnect: store.doWebsocketHandleReconnect,\n        onclose: store.doWebsocketHandleClose,\n        onerror: store.doWebsocketHandleError,\n        onmaximum: store.doWebsocketHandleMaximum\n      });\n      dispatch({\n        type: 'WEBSOCKET_INITIALIZE_FINISHED',\n        payload: {\n          ws: ws\n        }\n      });\n    },\n    doWebsocketHandleConnect: e => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'WEBSOCKET_OPEN',\n        payload: {\n          e: e\n        }\n      });\n    },\n    doWebsocketHandleMessage: e => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'WEBSOCKET_MESSAGE',\n        payload: {\n          e: e\n        }\n      });\n    },\n    doWebsocketHandleClose: e => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'WEBSOCKET_CLOSE',\n        payload: {\n          e: e\n        }\n      });\n    },\n    doWebsocketHandleReconnect: e => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'WEBSOCKET_RECONNECT',\n        payload: {\n          e: e\n        }\n      });\n    },\n    doWebsocketHandleError: e => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'WEBSOCKET_ERROR',\n        payload: {\n          e: e\n        }\n      });\n    },\n    doWebsocketHandleMaximum: e => ({\n      dispatch,\n      store\n    }) => {\n      dispatch({\n        type: 'WEBSOCKET_MAXIMUM_REACHED',\n        payload: {\n          e: e\n        }\n      });\n    },\n    doWebsocketSendMessage: msg => ({\n      dispatch,\n      store\n    }) => {\n      // @TODO, make this better\n      const ws = store.selectWebsocket();\n      if (typeof msg === 'object') return ws.json(msg);\n      ws.send(msg);\n    },\n    selectWebsocket: state => {\n      return state.websocket.ws;\n    },\n    reactWebsocketShouldInitialize: state => {\n      if (state.websocket.shouldInitialize) return {\n        actionCreator: 'doWebsocketInitialize'\n      };\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}