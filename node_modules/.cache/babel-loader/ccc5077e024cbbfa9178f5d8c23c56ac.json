{"ast":null,"code":"import VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Circle from 'ol/style/Circle';\nimport GeoJSON from 'ol/format/GeoJSON';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'NSI',\n  getReducer: () => {\n    const initialData = {\n      layer: null,\n      lastMessage: null,\n      shouldInitalize: false,\n      shouldFetch: false,\n      shouldHandleMsg: false,\n      ready: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'NSI_INITIALIZE_STARTED':\n        case 'NSI_INITIALIZE_FINISHED':\n        case 'NSI_FETCH_STARTED':\n          return Object.assign({}, state, payload);\n\n        case 'WEBSOCKET_MESSAGE':\n          return Object.assign({}, state, {\n            lastMessage: payload.e,\n            shouldHandleMsg: true\n          });\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doNSIInitialize: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'NSI_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap();\n    const source = new VectorSource();\n    const layer = new VectorLayer({\n      source: source,\n      style: (feature, resolution) => {\n        const properties = feature.getProperties();\n        const style = properties.style || {};\n        return new Style({\n          fill: new Fill({\n            color: style.fillColor || \"rgba( 66,232,244,.5)\"\n          }),\n          stroke: new Stroke({\n            width: style.strokeWidth || 3,\n            color: style.strokeColor || \"rgba( 66,232,244,.5)\"\n          }),\n          image: new Circle({\n            radius: style.circleRadius || 7,\n            fill: new Fill({\n              color: style.circleFill || \"rgba( 66,232,244,.5)\"\n            }),\n            stroke: new Stroke({\n              width: style.circleStrokeWidth || 3,\n              color: style.circleFillColor || \"rgba( 66,232,244,.5)\"\n            })\n          })\n        });\n      }\n    });\n    map.addLayer(layer);\n    dispatch({\n      type: 'NSI_INITIALIZE_FINISHED',\n      payload: {\n        layer: layer,\n        shouldFetch: true,\n        ready: true\n      }\n    });\n  },\n  doNSIFetch: () => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    dispatch({\n      type: 'NSI_FETCH_STARTED',\n      payload: {\n        shouldFetch: false\n      }\n    });\n    apiGet('/data', (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error('ERROR', response);\n      } else {\n        console.log(\"Not fetching NSI data yet.\"); // const layer = store.selectNSILayer();\n        // const source = layer.getSource();\n        // const features = geoJSON.readFeatures(body);\n        // source.addFeatures(features);\n        // dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\n        //     shouldCalculateStats: true\n        // }})\n      }\n    });\n    dispatch({\n      type: 'NSI_FETCH_FINISHED',\n      payload: {}\n    });\n  },\n  doNSIHandleMsg: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'NSI_HANDLE_MSG_STARTED',\n      payload: {\n        shouldHandleMsg: false\n      }\n    });\n    const ready = store.selectNSIReady();\n\n    if (ready) {\n      const myEdipi = store.selectAuthEdipi();\n      const lastMessage = store.selectNSILastMessage();\n      const data = JSON.parse(lastMessage.data);\n\n      if (myEdipi !== data.edipi) {\n        switch (data.action) {\n          case 'insert':\n            store.doNSIFetchFeatureById(data.id, data.edipi);\n            break;\n\n          case 'delete':\n            store.doNSIDeleteFeatureById(data.id);\n            break;\n\n          case 'update':\n            store.doNSIFetchFeatureById(data.id, data.edipi);\n            break;\n\n          default:\n        }\n      }\n    }\n  },\n  doNSIFetchFeatureById: (id, edipi) => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    apiGet(\"/data/\".concat(edipi, \"/\").concat(id), (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error(response);\n      } else {\n        const layer = store.selectNSILayer();\n        const source = layer.getSource();\n        const feature = source.getFeatureById(id);\n\n        if (feature) {\n          source.removeFeature(feature);\n        }\n\n        const newFeature = geoJSON.readFeature(body);\n        source.addFeature(newFeature);\n        dispatch({\n          type: 'DRAW_DATA_UPDATE_STATS',\n          payload: {\n            shouldCalculateStats: true\n          }\n        });\n      }\n    });\n  },\n  doNSIDeleteFeatureById: (id, edipi) => ({\n    dispatch,\n    store,\n    apiDelete\n  }) => {\n    const layer = store.selectNSILayer();\n    const source = layer.getSource();\n    const feature = source.getFeatureById(id);\n\n    if (feature) {\n      source.removeFeature(feature);\n      dispatch({\n        type: 'DRAW_DATA_UPDATE_STATS',\n        payload: {\n          shouldCalculateStats: true\n        }\n      });\n    }\n  },\n  selectNSILayer: state => {\n    return state.NSI.layer;\n  },\n  selectNSILastMessage: state => {\n    return state.NSI.lastMessage;\n  },\n  selectNSIReady: state => {\n    return state.NSI.ready;\n  },\n  reactNSIShouldInitialize: state => {\n    if (state.NSI.shouldInitalize) return {\n      actionCreator: 'doNSIInitialize'\n    };\n  },\n  reactNSIShouldFetch: state => {\n    if (state.NSI.shouldFetch) return {\n      actionCreator: 'doNSIFetch'\n    };\n  },\n  reactorNSIShouldHandleMsg: state => {\n    if (state.NSI.shouldHandleMsg) return {\n      actionCreator: 'doNSIHandleMsg'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\nsifrontend\\src\\app-bundles\\nsi-bundle.js"],"names":["VectorLayer","VectorSource","Style","Fill","Stroke","Circle","GeoJSON","geoJSON","name","getReducer","initialData","layer","lastMessage","shouldInitalize","shouldFetch","shouldHandleMsg","ready","state","type","payload","Object","assign","e","doNSIInitialize","dispatch","store","map","selectMap","source","style","feature","resolution","properties","getProperties","fill","color","fillColor","stroke","width","strokeWidth","strokeColor","image","radius","circleRadius","circleFill","circleStrokeWidth","circleFillColor","addLayer","doNSIFetch","apiGet","err","response","body","statusCode","console","error","log","doNSIHandleMsg","selectNSIReady","myEdipi","selectAuthEdipi","selectNSILastMessage","data","JSON","parse","edipi","action","doNSIFetchFeatureById","id","doNSIDeleteFeatureById","selectNSILayer","getSource","getFeatureById","removeFeature","newFeature","readFeature","addFeature","shouldCalculateStats","apiDelete","NSI","reactNSIShouldInitialize","actionCreator","reactNSIShouldFetch","reactorNSIShouldHandleMsg"],"mappings":"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","sourcesContent":["import VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Circle from 'ol/style/Circle';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nconst geoJSON = new GeoJSON();\r\n\r\nexport default{\r\n    name: 'NSI',\r\n    getReducer:()=>{\r\n        const initialData = {\r\n            layer: null,\r\n            lastMessage: null,\r\n            shouldInitalize: false,\r\n            shouldFetch: false,\r\n            shouldHandleMsg: false,\r\n            ready: false\r\n        }\r\n        return (state = initialData, {type, payload})=>{\r\n            switch(type){\r\n                case'NSI_INITIALIZE_STARTED':\r\n                case'NSI_INITIALIZE_FINISHED':\r\n                case 'NSI_FETCH_STARTED':\r\n                    return Object.assign({}, state, payload)\r\n                case 'WEBSOCKET_MESSAGE':\r\n                return Object.assign({}, state, {\r\n                    lastMessage: payload.e,\r\n                    shouldHandleMsg: true\r\n                });\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state\r\n            }\r\n        }\r\n    },    \r\n    doNSIInitialize: () => ({dispatch, store}) => {\r\n    dispatch({type: 'NSI_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n    const map = store.selectMap();\r\n    const source = new VectorSource();\r\n    const layer = new VectorLayer({\r\n        source: source,\r\n        style: (feature, resolution )=>{\r\n            const properties = feature.getProperties();\r\n            const style = properties.style || {};\r\n            return new Style({\r\n            fill: new Fill({\r\n                color: style.fillColor || `rgba( 66,232,244,.5)`\r\n            }),\r\n            stroke: new Stroke({\r\n                width: style.strokeWidth || 3,\r\n                color: style.strokeColor || `rgba( 66,232,244,.5)`\r\n            }),\r\n            image: new Circle({\r\n                radius: style.circleRadius || 7,\r\n                fill: new Fill({\r\n                    color: style.circleFill || `rgba( 66,232,244,.5)`\r\n                }),\r\n                stroke: new Stroke({\r\n                    width: style.circleStrokeWidth || 3,\r\n                    color: style.circleFillColor || `rgba( 66,232,244,.5)`\r\n                })\r\n            })\r\n        })\r\n    }\r\n    })\r\n    map.addLayer(layer);\r\n    dispatch({\r\n        type: 'NSI_INITIALIZE_FINISHED',\r\n        payload:{\r\n            layer: layer,\r\n            shouldFetch: true,\r\n            ready: true\r\n        }\r\n    })\r\n},\r\ndoNSIFetch: () => ({dispatch, store, apiGet}) => {\r\n    dispatch({type: 'NSI_FETCH_STARTED', payload: {shouldFetch: false}})\r\n\r\n    \r\n    apiGet('/data',(err,response,body)=>{\r\n        if(err || response.statusCode !== 200){\r\n            console.error('ERROR', response);\r\n        }else{\r\n            console.log(\"Not fetching NSI data yet.\")\r\n            // const layer = store.selectNSILayer();\r\n            // const source = layer.getSource();\r\n            // const features = geoJSON.readFeatures(body);\r\n            // source.addFeatures(features);\r\n            // dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\r\n            //     shouldCalculateStats: true\r\n            // }})\r\n        }\r\n    })\r\n    dispatch({type: 'NSI_FETCH_FINISHED', payload: {}})\r\n},\r\ndoNSIHandleMsg: () => ({dispatch, store}) => {\r\n    dispatch({type: 'NSI_HANDLE_MSG_STARTED', payload:{shouldHandleMsg: false}})\r\n    const ready = store.selectNSIReady();\r\n    if(ready){\r\n        const myEdipi = store.selectAuthEdipi();\r\n        const lastMessage = store.selectNSILastMessage();\r\n        const data = JSON.parse(lastMessage.data)\r\n        if(myEdipi !== data.edipi){\r\n            switch(data.action){\r\n                case 'insert':\r\n                    store.doNSIFetchFeatureById(data.id, data.edipi)\r\n                    break;\r\n                case 'delete':\r\n                    store.doNSIDeleteFeatureById(data.id)\r\n                    break;\r\n                case 'update':\r\n                    store.doNSIFetchFeatureById(data.id, data.edipi)\r\n                    break;\r\n                default:\r\n            }\r\n        }        \r\n    }\r\n\r\n\r\n},\r\ndoNSIFetchFeatureById: (id, edipi) => ({dispatch, store, apiGet}) =>{\r\n    apiGet(`/data/${edipi}/${id}`, (err, response, body) =>{\r\n        if(err || response.statusCode !== 200){\r\n            console.error(response)\r\n        }else{\r\n            const layer = store.selectNSILayer();\r\n            const source = layer.getSource();\r\n            const feature = source.getFeatureById(id)\r\n            if(feature){\r\n                source.removeFeature(feature);\r\n            }\r\n            const newFeature = geoJSON.readFeature(body);\r\n            source.addFeature(newFeature);\r\n            dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\r\n                shouldCalculateStats: true\r\n            }})\r\n        }\r\n    })\r\n},\r\ndoNSIDeleteFeatureById: (id, edipi) => ({dispatch, store, apiDelete}) =>{\r\n            const layer = store.selectNSILayer();\r\n            const source = layer.getSource();\r\n            const feature = source.getFeatureById(id)\r\n            if(feature){\r\n                source.removeFeature(feature);\r\n                dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\r\n                    shouldCalculateStats: true\r\n                }})\r\n            }\r\n},\r\nselectNSILayer: (state) => {\r\n    return state.NSI.layer;\r\n},\r\nselectNSILastMessage: (state) =>{\r\n    return state.NSI.lastMessage;\r\n},\r\nselectNSIReady: (state) =>{\r\n    return state.NSI.ready;\r\n},\r\nreactNSIShouldInitialize: (state) => {\r\n    if(state.NSI.shouldInitalize) return { actionCreator: 'doNSIInitialize'}\r\n},\r\nreactNSIShouldFetch: (state) => {\r\n    if(state.NSI.shouldFetch) return { actionCreator: 'doNSIFetch'}\r\n},\r\nreactorNSIShouldHandleMsg: (state) => {\r\n    if(state.NSI.shouldHandleMsg) return {actionCreator: 'doNSIHandleMsg'}\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}