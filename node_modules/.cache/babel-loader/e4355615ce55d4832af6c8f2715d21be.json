{"ast":null,"code":"import VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nimport Modify from 'ol/interaction/Modify';\nimport Select from 'ol/interaction/Select';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Circle from 'ol/style/Circle';\nexport default {\n  name: 'draw',\n  getReducer: () => {\n    const initialData = {\n      layer: null,\n      shouldInitalize: false,\n      drawPoints: null,\n      drawLines: null,\n      drawPolygons: null,\n      modify: null,\n      select: null,\n      activeInteraction: null\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_INITIALIZE_STARTED':\n        case 'DRAW_INITIALIZE_FINISHED':\n        case 'DRAW_ADD_INTERACTION':\n          return Object.assign({}, state, payload);\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawInitializeLayer: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'DRAW_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap();\n    const source = new VectorSource();\n    source.on('addFeature', store.doDrawDataHandleAdd = true);\n    const layer = new VectorLayer({\n      source: source,\n      style: new Style({\n        fill: new Fill({\n          color: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.5)\")\n        }),\n        stroke: new Stroke({\n          width: 3,\n          color: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.9)\")\n        }),\n        image: new Circle({\n          radius: 7,\n          fill: new Fill({\n            color: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.5)\")\n          }),\n          stroke: new Stroke({\n            width: 3,\n            color: \"rgba( \".concat(Math.random() * 255, \", \").concat(Math.random() * 255, \",\").concat(Math.random() * 255, \",.9)\")\n          })\n        })\n      })\n    });\n    const drawPoints = new Draw({\n      source: source,\n      type: 'Point'\n    });\n    const drawLines = new Draw({\n      source: source,\n      type: 'LineString'\n    });\n    const drawPolygons = new Draw({\n      source: source,\n      type: 'Polygon'\n    });\n    const modify = new Modify({\n      source: source\n    });\n    const select = new Select({\n      layer: [layer]\n    });\n    map.addLayer(layer); //map.addInteraction(modify);\n\n    dispatch({\n      type: 'DRAW_INITIALIZE_FINISHED',\n      payload: {\n        layer: layer,\n        drawPoints: drawPoints,\n        drawLines: drawLines,\n        drawPolygons: drawPolygons,\n        modify: modify,\n        select: select\n      }\n    });\n  },\n  doDrawAddInteraction: interaction => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap();\n    const select = store.selectDrawSelect();\n    select.getFeatures().clear();\n    const activeInteraction = store.selectDrawActiveInteraction();\n    let newInteraction = null;\n    map.removeInteraction(activeInteraction);\n\n    if (interaction !== activeInteraction) {\n      map.addInteraction(interaction);\n      newInteraction = interaction;\n    }\n\n    dispatch({\n      type: 'DRAW_ADD_INTERACTION',\n      payload: {\n        activeInteraction: newInteraction\n      }\n    });\n  },\n  doDrawDeleteSelectedFeatures: () => ({\n    dispatch,\n    store\n  }) => {\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource();\n    const select = store.selectDrawSelect();\n    const features = select.getFeatures();\n    features.forEach(feature => {\n      source.removeFeature(feature);\n    });\n    features.clear();\n  },\n  selectDrawLayer: state => {\n    return state.draw.layer;\n  },\n  selectDrawPoints: state => {\n    return state.draw.drawPoints;\n  },\n  selectDrawLines: state => {\n    return state.draw.drawLines;\n  },\n  selectDrawPolygons: state => {\n    return state.draw.drawPolygons;\n  },\n  selectModify: state => {\n    return state.draw.modify;\n  },\n  selectDrawSelect: state => {\n    return state.draw.select;\n  },\n  selectDrawActiveInteraction: state => {\n    return state.draw.activeInteraction;\n  },\n  reactDrawShouldInitialize: state => {\n    if (state.draw.shouldInitalize) return {\n      actionCreator: 'doDrawInitializeLayer'\n    };\n  },\n  init: store => {\n    window.addEventListener('keyup', e => {\n      if (e.keyCode === 8 || e.keyCode === 46) {\n        store.doDrawDeleteSelectedFeatures();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\draw-bundle.js"],"names":["VectorLayer","VectorSource","Draw","Modify","Select","Style","Fill","Stroke","Circle","name","getReducer","initialData","layer","shouldInitalize","drawPoints","drawLines","drawPolygons","modify","select","activeInteraction","state","type","payload","Object","assign","doDrawInitializeLayer","dispatch","store","map","selectMap","source","on","doDrawDataHandleAdd","style","fill","color","Math","random","stroke","width","image","radius","addLayer","doDrawAddInteraction","interaction","selectDrawSelect","getFeatures","clear","selectDrawActiveInteraction","newInteraction","removeInteraction","addInteraction","doDrawDeleteSelectedFeatures","selectDrawLayer","getSource","features","forEach","feature","removeFeature","draw","selectDrawPoints","selectDrawLines","selectDrawPolygons","selectModify","reactDrawShouldInitialize","actionCreator","init","window","addEventListener","e","keyCode"],"mappings":"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","sourcesContent":["import VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Draw from 'ol/interaction/Draw';\r\nimport Modify from 'ol/interaction/Modify';\r\nimport Select from 'ol/interaction/Select';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Circle from 'ol/style/Circle';\r\n\r\nexport default {\r\n    name: 'draw',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            layer: null,\r\n            shouldInitalize: false,\r\n            drawPoints: null,\r\n            drawLines: null,\r\n            drawPolygons: null,\r\n            modify:null,\r\n            select:null,\r\n            activeInteraction: null\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_INITIALIZE_STARTED':\r\n                case  'DRAW_INITIALIZE_FINISHED':\r\n                case  'DRAW_ADD_INTERACTION':\r\n                    return Object.assign({}, state, payload);\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawInitializeLayer: () => ({dispatch, store}) => {\r\n        dispatch({type: 'DRAW_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n        const map = store.selectMap();\r\n        const source = new VectorSource();\r\n        source.on('addFeature', store.doDrawDataHandleAdd = true)\r\n        const layer = new VectorLayer({\r\n            source: source,\r\n            style: new Style({\r\n                fill: new Fill({\r\n                    color: `rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.5)`\r\n                }),\r\n                stroke: new Stroke({\r\n                    width: 3,\r\n                    color: `rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.9)`\r\n                }),\r\n                image: new Circle({\r\n                    radius: 7,\r\n                    fill: new Fill({\r\n                        color: `rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.5)`\r\n                    }),\r\n                    stroke: new Stroke({\r\n                        width: 3,\r\n                        color: `rgba( ${Math.random()*255}, ${Math.random()*255},${Math.random()*255},.9)`\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        const drawPoints = new Draw({\r\n            source: source,\r\n            type: 'Point'\r\n        })\r\n        const drawLines = new Draw({\r\n            source: source,\r\n            type: 'LineString'\r\n        })\r\n        const drawPolygons = new Draw({\r\n            source: source,\r\n            type: 'Polygon'\r\n        })\r\n        const modify = new Modify({\r\n            source: source\r\n        })\r\n        const select = new Select({\r\n            layer: [layer]\r\n        })\r\n        map.addLayer(layer);\r\n        //map.addInteraction(modify);\r\n        dispatch({\r\n            type: 'DRAW_INITIALIZE_FINISHED',\r\n            payload:{\r\n                layer: layer,\r\n                drawPoints: drawPoints,\r\n                drawLines: drawLines,\r\n                drawPolygons: drawPolygons,\r\n                modify: modify,\r\n                select: select\r\n            }\r\n        })\r\n    },\r\n    doDrawAddInteraction: (interaction) => ({dispatch, store}) =>{\r\n        const map = store.selectMap();\r\n        const select = store.selectDrawSelect();\r\n        select.getFeatures().clear();\r\n        const activeInteraction = store.selectDrawActiveInteraction();\r\n        let newInteraction = null;\r\n        map.removeInteraction(activeInteraction)\r\n        if(interaction!==activeInteraction){\r\n            map.addInteraction(interaction);\r\n            newInteraction = interaction;\r\n        } \r\n        dispatch({\r\n            type: 'DRAW_ADD_INTERACTION',\r\n            payload:{\r\n                activeInteraction: newInteraction\r\n            }\r\n        })\r\n    },\r\n    doDrawDeleteSelectedFeatures:() =>({dispatch, store}) =>{\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n        const select = store.selectDrawSelect();\r\n        const features = select.getFeatures();\r\n        features.forEach((feature)=>{\r\n            source.removeFeature(feature);\r\n        })\r\n        features.clear();\r\n    },\r\n\r\n    selectDrawLayer: (state) => {\r\n        return state.draw.layer;\r\n    },\r\n    selectDrawPoints: (state) => {\r\n        return state.draw.drawPoints;\r\n    },\r\n    selectDrawLines: (state) => {\r\n        return state.draw.drawLines;\r\n    },\r\n    selectDrawPolygons: (state) => {\r\n        return state.draw.drawPolygons;\r\n    },\r\n    selectModify: (state) => {\r\n        return state.draw.modify;\r\n    },\r\n    selectDrawSelect: (state) => {\r\n        return state.draw.select;\r\n    },\r\n    selectDrawActiveInteraction: (state) => {\r\n        return state.draw.activeInteraction;\r\n    },\r\n    reactDrawShouldInitialize: (state) => {\r\n        if(state.draw.shouldInitalize) return { actionCreator: 'doDrawInitializeLayer'}\r\n    },\r\n    init: (store) =>{\r\n        window.addEventListener('keyup', (e) =>{\r\n            if(e.keyCode === 8 || e.keyCode === 46){\r\n                store.doDrawDeleteSelectedFeatures();\r\n            }\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}