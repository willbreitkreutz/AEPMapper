{"ast":null,"code":"import { transform } from 'ol/proj';\nimport census from 'citysdk';\nimport GeoJSON from 'ol/format/GeoJSON';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'selectByFips',\n  getReducer: () => {\n    const initialData = {\n      selectByFipsIsActive: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'SELECT_BY_FIPS_ACTIVATED':\n        case 'SELECT_BY_FIPS_DEACTIVATED':\n        case 'SELECT_BY_FIPS_STARTED':\n        case 'SELECT_BY_FIPS_GET_FIPS':\n        case 'SELECT_BY_FIPS_GET_STATS':\n        case 'SELECT_BY_FIPS_FINISHED':\n          return Object.assign({}, state, payload);\n\n        default:\n          return state;\n      }\n    };\n  },\n  doSelectByFips: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: \"SELECT_BY_FIPS_STARTED\"\n    });\n    var statsKeyStore = store.selectCitysdkStatsKey();\n    const map = store.selectMap();\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource(); //map.\n\n    const e = npnull; //it seems like i refactored, but i dont remember what I did. this looks like a click handler \n    //e is now undef - so i probably need to assign a click and properly remove it.\n\n    var coord = transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');\n    dispatch({\n      type: \"SELECT_BY_FIPS_GET_FIPS\"\n    }); //need to parralell fetch stats from the nsi api\n\n    census({\n      \"vintage\": 2015,\n      // required\n      \"geoHierarchy\": {\n        // required\n        \"county\": {\n          \"lat\": coord[1],\n          \"lng\": coord[0]\n        }\n      }\n    }, (err, res) => {\n      dispatch({\n        type: 'SELECT_BY_FIPS_STARTED'\n      });\n      census({\n        \"vintage\": \"2015\",\n        \"geoHierarchy\": {\n          \"state\": res.geoHierarchy.state //\"county\": res.geoHierarchy.county\n\n        },\n        \"sourcePath\": [\"acs\", \"acs5\"],\n        \"values\": [\"B19083_001E\"],\n        // GINI index             \n        \"statsKey\": statsKeyStore,\n        \"geoResolution\": \"5m\"\n      }, (err, res) => {\n        const features = geoJSON.readFeatures(res, {\n          \"dataProjection\": 'EPSG:4326',\n          \"featureProjection\": 'EPSG:3857'\n        });\n        source.addFeatures(features);\n        dispatch({\n          type: 'SELECT_BY_FIPS_FINISHED'\n        });\n      });\n    });\n    dispatch({\n      type: \"SELECT_BY_FIPS_FINISHED\"\n    });\n  },\n  doDrawToggleSelectByCounty: clickEvent => ({\n    dispatch,\n    store\n  }) => {\n    const map = store.selectMap(); //what if the active interaction is the select by fips?\n\n    if (store.selectByFipsIsActive()) {\n      map.un(\"click\", e => store.doSelectByFips());\n      dispatch({\n        type: 'SELECT_BY_FIPS_ACTIVATED',\n        payload: {\n          selectByFipsIsActive: true\n        }\n      });\n    } else {\n      map.on(\"click\", e => store.doSelectByFips());\n      dispatch({\n        type: 'SELECT_BY_FIPS_ACTIVATED',\n        payload: {\n          selectByFipsIsActive: true\n        }\n      });\n    }\n  },\n  selectSelectByFipsIsActive: state => {\n    return state.selectByFips.selectByFipsIsActive;\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\nsifrontend\\src\\app-bundles\\select-by-fips-bundle.js"],"names":["transform","census","GeoJSON","geoJSON","name","getReducer","initialData","selectByFipsIsActive","state","type","payload","Object","assign","doSelectByFips","dispatch","store","statsKeyStore","selectCitysdkStatsKey","map","selectMap","layer","selectDrawLayer","source","getSource","e","npnull","coord","coordinate","err","res","geoHierarchy","features","readFeatures","addFeatures","doDrawToggleSelectByCounty","clickEvent","un","on","selectSelectByFipsIsActive","selectByFips"],"mappings":"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","sourcesContent":["import {transform} from 'ol/proj';\r\nimport census from 'citysdk';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nconst geoJSON = new GeoJSON();\r\n\r\n\r\nexport default {\r\n    name: 'selectByFips',\r\n    getReducer:() =>{\r\n        const initialData = {\r\n            selectByFipsIsActive: false,\r\n        }\r\n        return (state = initialData, {type, payload}) => {\r\n            switch(type){\r\n                case 'SELECT_BY_FIPS_ACTIVATED':\r\n                case 'SELECT_BY_FIPS_DEACTIVATED':\r\n                case 'SELECT_BY_FIPS_STARTED':\r\n                case 'SELECT_BY_FIPS_GET_FIPS':\r\n                case 'SELECT_BY_FIPS_GET_STATS':\r\n                case 'SELECT_BY_FIPS_FINISHED':\r\n                    return Object.assign({}, state, payload);\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doSelectByFips: () =>({dispatch, store}) =>{\r\n        dispatch({\r\n            type: \"SELECT_BY_FIPS_STARTED\"\r\n        })\r\n        var statsKeyStore = store.selectCitysdkStatsKey()\r\n        const map = store.selectMap();\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n        //map.\r\n        const e = npnull;\r\n        //it seems like i refactored, but i dont remember what I did. this looks like a click handler \r\n        //e is now undef - so i probably need to assign a click and properly remove it.\r\n        var coord = transform(e.coordinate,'EPSG:3857','EPSG:4326')\r\n        dispatch({\r\n            type: \"SELECT_BY_FIPS_GET_FIPS\"\r\n        })\r\n\r\n        //need to parralell fetch stats from the nsi api\r\n        census({\r\n            \"vintage\" : 2015,    // required\r\n            \"geoHierarchy\" : {   // required\r\n                \"county\" : {\r\n                \"lat\" : coord[1], \r\n                \"lng\" : coord[0]\r\n                }\r\n            }\r\n            }, \r\n            (err, res) => {\r\n                dispatch({\r\n                    type: 'SELECT_BY_FIPS_STARTED'\r\n                })\r\n            census({\r\n                \"vintage\" : \"2015\",\r\n                \"geoHierarchy\" : {\r\n                    \"state\": res.geoHierarchy.state,\r\n                    //\"county\": res.geoHierarchy.county\r\n                },\r\n                \"sourcePath\" : [\"acs\", \"acs5\"],  \r\n                \"values\" : [\"B19083_001E\"],    // GINI index             \r\n                \"statsKey\" : statsKeyStore,\r\n                \"geoResolution\" : \"5m\"\r\n                },\r\n                (err, res) => {\r\n                const features = geoJSON.readFeatures(res,{\"dataProjection\" : 'EPSG:4326', \"featureProjection\":'EPSG:3857' });\r\n                source.addFeatures(features);\r\n                dispatch({\r\n                    type: 'SELECT_BY_FIPS_FINISHED'\r\n                })\r\n                }\r\n            )\r\n        })\r\n        dispatch({\r\n            type: \"SELECT_BY_FIPS_FINISHED\"\r\n        })            \r\n    },\r\n    doDrawToggleSelectByCounty: (clickEvent) =>({dispatch, store}) =>{\r\n\r\n        const map = store.selectMap();\r\n        //what if the active interaction is the select by fips?\r\n        if (store.selectByFipsIsActive()){\r\n            map.un(\"click\", (e)=> store.doSelectByFips())\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_ACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: true,\r\n                }\r\n            })\r\n        }else{\r\n            map.on(\"click\", (e)=> store.doSelectByFips())\r\n            dispatch({\r\n                type: 'SELECT_BY_FIPS_ACTIVATED',\r\n                payload:{\r\n                    selectByFipsIsActive: true,\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n    ,\r\n    selectSelectByFipsIsActive: (state) =>{\r\n        return state.selectByFips.selectByFipsIsActive;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}