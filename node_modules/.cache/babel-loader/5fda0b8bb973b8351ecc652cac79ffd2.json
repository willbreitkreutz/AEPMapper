{"ast":null,"code":"import VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Style from 'ol/style/Style';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Circle from 'ol/style/Circle';\nimport GeoJSON from 'ol/format/GeoJSON';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'collab',\n  getReducer: () => {\n    const initialData = {\n      layer: null,\n      lastMessage: null,\n      shouldInitalize: false,\n      shouldFetch: false,\n      shouldHandleMsg: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'COLLAB_INITIALIZE_STARTED':\n        case 'COLLAB_INITIALIZE_FINISHED':\n        case 'COLLAB_FETCH_STARTED':\n          return Object.assign({}, state, payload);\n\n        case 'WEBSOCKET_MESSAGE':\n          return Object.assign({}, state, {\n            lastMessage: payload.e,\n            shouldHandleMsg: true\n          });\n\n        case \"MAP_INITIALIZED\":\n          return Object.assign({}, state, {\n            shouldInitalize: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doCollabInitialize: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'COLLAB_INITIALIZE_STARTED',\n      payload: {\n        shouldInitalize: false\n      }\n    });\n    const map = store.selectMap();\n    const source = new VectorSource();\n    const layer = new VectorLayer({\n      source: source,\n      style: (feature, resolution) => {\n        const properties = feature.getProperties();\n        const style = properties.style || {};\n        return new Style({\n          fill: new Fill({\n            color: style.fillColor || \"rgba( 66,232,244,.5)\"\n          }),\n          stroke: new Stroke({\n            width: style.strokeWidth || 3,\n            color: style.strokeColor || \"rgba( 66,232,244,.5)\"\n          }),\n          image: new Circle({\n            radius: style.circleRadius || 7,\n            fill: new Fill({\n              color: style.circleFill || \"rgba( 66,232,244,.5)\"\n            }),\n            stroke: new Stroke({\n              width: style.circleStrokeWidth || 3,\n              color: style.circleFillColor || \"rgba( 66,232,244,.5)\"\n            })\n          })\n        });\n      }\n    });\n    map.addLayer(layer);\n    dispatch({\n      type: 'COLLAB_INITIALIZE_FINISHED',\n      payload: {\n        layer: layer,\n        shouldFetch: true\n      }\n    });\n  },\n  doCollabFetch: () => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    dispatch({\n      type: 'COLLAB_FETCH_STARTED',\n      payload: {\n        shouldFetch: false\n      }\n    });\n    apiGet('/data', (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error('ERROR', response);\n      } else {\n        const layer = store.selectCollabLayer();\n        const source = layer.getSource();\n        const features = geoJSON.readFeatures(body);\n        source.addFeatures(features);\n      }\n    });\n    dispatch({\n      type: 'COLLAB_FETCH_FINISHED',\n      payload: {}\n    });\n  },\n  doCollabHandleMsg: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: 'COLLAB_HANDLE_MSG_STARTED',\n      payload: {\n        shouldHandleMsg: false\n      }\n    });\n    const lastMessage = store.selectCollabLastMessage();\n    const data = JSON.parse(lastMessage.data);\n  },\n  selectCollabLayer: state => {\n    return state.collab.layer;\n  },\n  selectCollabLastMessage: state => {\n    return state.collab.lastMessage;\n  },\n  reactCollabShouldInitialize: state => {\n    if (state.collab.shouldInitalize) return {\n      actionCreator: 'doCollabInitialize'\n    };\n  },\n  reactCollabShouldFetch: state => {\n    if (state.collab.shouldFetch) return {\n      actionCreator: 'doCollabFetch'\n    };\n  },\n  reactorCollabShouldHandleMsg: state => {\n    if (state.collab.shouldHandleMsg) return {\n      actionCreator: 'doCollabHandleMsg'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\collab-bundle.js"],"names":["VectorLayer","VectorSource","Style","Fill","Stroke","Circle","GeoJSON","geoJSON","name","getReducer","initialData","layer","lastMessage","shouldInitalize","shouldFetch","shouldHandleMsg","state","type","payload","Object","assign","e","doCollabInitialize","dispatch","store","map","selectMap","source","style","feature","resolution","properties","getProperties","fill","color","fillColor","stroke","width","strokeWidth","strokeColor","image","radius","circleRadius","circleFill","circleStrokeWidth","circleFillColor","addLayer","doCollabFetch","apiGet","err","response","body","statusCode","console","error","selectCollabLayer","getSource","features","readFeatures","addFeatures","doCollabHandleMsg","selectCollabLastMessage","data","JSON","parse","collab","reactCollabShouldInitialize","actionCreator","reactCollabShouldFetch","reactorCollabShouldHandleMsg"],"mappings":"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","sourcesContent":["import VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Style from 'ol/style/Style';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Circle from 'ol/style/Circle';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nconst geoJSON = new GeoJSON();\r\n\r\nexport default{\r\n    name: 'collab',\r\n    getReducer:()=>{\r\n        const initialData = {\r\n            layer: null,\r\n            lastMessage: null,\r\n            shouldInitalize: false,\r\n            shouldFetch: false,\r\n            shouldHandleMsg: false\r\n        }\r\n        return (state = initialData, {type, payload})=>{\r\n            switch(type){\r\n                case'COLLAB_INITIALIZE_STARTED':\r\n                case'COLLAB_INITIALIZE_FINISHED':\r\n                case 'COLLAB_FETCH_STARTED':\r\n                    return Object.assign({}, state, payload)\r\n                case 'WEBSOCKET_MESSAGE':\r\n                return Object.assign({}, state, {\r\n                    lastMessage: payload.e,\r\n                    shouldHandleMsg: true\r\n                });\r\n                case \"MAP_INITIALIZED\":\r\n                    return Object.assign({}, state, {\r\n                        shouldInitalize: true\r\n                    });\r\n                default:\r\n                    return state\r\n            }\r\n        }\r\n    },    \r\n    doCollabInitialize: () => ({dispatch, store}) => {\r\n    dispatch({type: 'COLLAB_INITIALIZE_STARTED', payload: {shouldInitalize: false}})\r\n    const map = store.selectMap();\r\n    const source = new VectorSource();\r\n    const layer = new VectorLayer({\r\n        source: source,\r\n        style: (feature, resolution )=>{\r\n            const properties = feature.getProperties();\r\n            const style = properties.style || {};\r\n            return new Style({\r\n            fill: new Fill({\r\n                color: style.fillColor || `rgba( 66,232,244,.5)`\r\n            }),\r\n            stroke: new Stroke({\r\n                width: style.strokeWidth || 3,\r\n                color: style.strokeColor || `rgba( 66,232,244,.5)`\r\n            }),\r\n            image: new Circle({\r\n                radius: style.circleRadius || 7,\r\n                fill: new Fill({\r\n                    color: style.circleFill || `rgba( 66,232,244,.5)`\r\n                }),\r\n                stroke: new Stroke({\r\n                    width: style.circleStrokeWidth || 3,\r\n                    color: style.circleFillColor || `rgba( 66,232,244,.5)`\r\n                })\r\n            })\r\n        })\r\n    }\r\n    })\r\n    map.addLayer(layer);\r\n    dispatch({\r\n        type: 'COLLAB_INITIALIZE_FINISHED',\r\n        payload:{\r\n            layer: layer,\r\n            shouldFetch: true\r\n        }\r\n    })\r\n},\r\ndoCollabFetch: () => ({dispatch, store, apiGet}) => {\r\n    dispatch({type: 'COLLAB_FETCH_STARTED', payload: {shouldFetch: false}})\r\n    apiGet('/data',(err,response,body)=>{\r\n        if(err || response.statusCode !== 200){\r\n            console.error('ERROR', response);\r\n        }else{\r\n            const layer = store.selectCollabLayer();\r\n            const source = layer.getSource();\r\n            const features = geoJSON.readFeatures(body);\r\n            source.addFeatures(features);\r\n        }\r\n    })\r\n    dispatch({type: 'COLLAB_FETCH_FINISHED', payload: {}})\r\n},\r\ndoCollabHandleMsg: () => ({dispatch, store}) => {\r\n    dispatch({type: 'COLLAB_HANDLE_MSG_STARTED', payload:{shouldHandleMsg: false}})\r\n    const lastMessage = store.selectCollabLastMessage();\r\n    const data = JSON.parse(lastMessage.data)\r\n},\r\nselectCollabLayer: (state) => {\r\n    return state.collab.layer;\r\n},\r\nselectCollabLastMessage: (state) =>{\r\n    return state.collab.lastMessage;\r\n},\r\nreactCollabShouldInitialize: (state) => {\r\n    if(state.collab.shouldInitalize) return { actionCreator: 'doCollabInitialize'}\r\n},\r\nreactCollabShouldFetch: (state) => {\r\n    if(state.collab.shouldFetch) return { actionCreator: 'doCollabFetch'}\r\n},\r\nreactorCollabShouldHandleMsg: (state) => {\r\n    if(state.collab.shouldHandleMsg) return {actionCreator: 'doCollabHandleMsg'}\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}