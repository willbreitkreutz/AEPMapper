{"ast":null,"code":"/**\n * @module ol/source/ImageArcGISRest\n */\nimport ImageWrapper from '../Image.js';\nimport { assert } from '../asserts.js';\nimport { listen } from '../events.js';\nimport EventType from '../events/EventType.js';\nimport { containsExtent, getHeight, getWidth } from '../extent.js';\nimport { assign } from '../obj.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport { appendParams } from '../uri.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\n * access pixel data with the Canvas renderer.  See\n * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image} for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} projection Projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @fires ol/source/Image~ImageSourceEvent\n * @api\n */\n\nvar ImageArcGISRest =\n/*@__PURE__*/\nfunction (ImageSource) {\n  function ImageArcGISRest(opt_options) {\n    var options = opt_options ||\n    /** @type {Options} */\n    {};\n    ImageSource.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      resolutions: options.resolutions\n    });\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n\n    this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n\n    this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n\n    this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n\n    this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  if (ImageSource) ImageArcGISRest.__proto__ = ImageSource;\n  ImageArcGISRest.prototype = Object.create(ImageSource && ImageSource.prototype);\n  ImageArcGISRest.prototype.constructor = ImageArcGISRest;\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n\n  ImageArcGISRest.prototype.getParams = function getParams() {\n    return this.params_;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  ImageArcGISRest.prototype.getImageInternal = function getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n\n    var params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    extent = extent.slice();\n    var centerX = (extent[0] + extent[2]) / 2;\n    var centerY = (extent[1] + extent[3]) / 2;\n\n    if (this.ratio_ != 1) {\n      var halfWidth = this.ratio_ * getWidth(extent) / 2;\n      var halfHeight = this.ratio_ * getHeight(extent) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    var imageResolution = resolution / pixelRatio; // Compute an integer width and height.\n\n    var width = Math.ceil(getWidth(extent) / imageResolution);\n    var height = Math.ceil(getHeight(extent) / imageResolution); // Modify the extent to match the integer width and height.\n\n    extent[0] = centerX - imageResolution * width / 2;\n    extent[2] = centerX + imageResolution * width / 2;\n    extent[1] = centerY - imageResolution * height / 2;\n    extent[3] = centerY + imageResolution * height / 2;\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n    var url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    listen(this.image_, EventType.CHANGE, this.handleImageChange, this);\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getImageLoadFunction = function getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n\n\n  ImageArcGISRest.prototype.getRequestUrl_ = function getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    var srid = projection.getCode().split(':').pop();\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n    var url = this.url_;\n    var modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n\n    return appendParams(modifiedUrl, params);\n  };\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.getUrl = function getUrl() {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.setImageLoadFunction = function setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.setUrl = function setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n\n\n  ImageArcGISRest.prototype.updateParams = function updateParams(params) {\n    assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  };\n\n  return ImageArcGISRest;\n}(ImageSource);\n\nexport default ImageArcGISRest;","map":null,"metadata":{},"sourceType":"module"}