{"ast":null,"code":"import GeoJSON from 'ol/format/GeoJSON';\nimport { groupBy } from 'lodash';\nconst geoJSON = new GeoJSON();\nexport default {\n  name: 'drawData',\n  getReducer: () => {\n    const initialData = {\n      shouldFetch: false,\n      stats: null,\n      shouldCalculateStats: false\n    };\n    return (state = initialData, {\n      type,\n      payload\n    }) => {\n      switch (type) {\n        case 'DRAW_DATA_FETCH_STARTED':\n        case 'DRAW_DATA_FETCH_FINISHED':\n        case 'DRAW_DATA_CALCULATE_STATS_STARTED':\n        case 'DRAW_DATA_CALCULATE_STATS_FINISHED':\n        case 'DRAW_DATA_UPDATE_STATS':\n          return Object.assign({}, state, payload);\n\n        case 'DRAW_INITIALIZE_FINISHED':\n          return Object.assign({}, state, {\n            shouldFetch: true\n          });\n\n        default:\n          return state;\n      }\n    };\n  },\n  doDrawDataFetch: () => ({\n    dispatch,\n    store,\n    apiGet\n  }) => {\n    dispatch({\n      type: 'DRAW_DATA_FETCH_STARTED',\n      payload: {\n        shouldFetch: false\n      }\n    });\n    apiGet('/mydata', (err, response, body) => {\n      if (err || response.statusCode !== 200) {\n        console.error('ERROR', response);\n      } else {\n        const layer = store.selectDrawLayer();\n        const source = layer.getSource();\n        const features = geoJSON.readFeatures(body);\n        source.addFeatures(features);\n      }\n    });\n    dispatch({\n      type: 'DRAW_DATA_FETCH_FINISHED',\n      payload: {\n        shouldCalculateStats: true\n      }\n    });\n  },\n  doDrawDataHandleAdd: e => ({\n    dispatch,\n    store,\n    apiPost\n  }) => {\n    if (!e.feature.getId()) {\n      const styleSettings = store.selectDrawStyleSettings();\n      e.feature.set('style', styleSettings, true);\n      e.feature.set('created_by', \"Master Will\", true);\n      e.feature.set('create_date', new Date(), true);\n      const geoJsonFeature = geoJSON.writeFeature(e.feature);\n      apiPost('/data', JSON.parse(geoJsonFeature), (err, response, body) => {\n        if (err || response.statusCode !== 200) {\n          console.error('ERROR', response);\n        } else {\n          e.feature.setId(body.id);\n          dispatch({\n            type: 'DRAW_DATA_UPDATE_STATS',\n            payload: {\n              shouldCalculateStats: true\n            }\n          });\n        }\n      });\n    }\n  },\n  doDrawDataHandleRemove: e => ({\n    dispatch,\n    store,\n    apiDelete\n  }) => {\n    const id = e.feature.getId();\n\n    if (id) {\n      apiDelete(\"/data/\".concat(id), (err, response, body) => {\n        if (err || response.statusCode !== 200) {\n          console.error('ERROR', response);\n        } else {\n          console.log(body);\n          dispatch({\n            type: 'DRAW_DATA_UPDATE_STATS',\n            payload: {\n              shouldCalculateStats: true\n            }\n          });\n        }\n      });\n    }\n  },\n  doDrawDataHandleChange: e => ({\n    dispatch,\n    store,\n    apiPut\n  }) => {\n    const id = e.feature.getId();\n\n    if (id) {\n      const geoJsonFeature = geoJSON.writeFeature(e.feature);\n      apiPut(\"/data/\".concat(id), JSON.parse(geoJsonFeature), (err, response, body) => {\n        if (err || response.statusCode !== 200) {\n          console.error('ERROR', response);\n        } else {\n          console.log(body);\n          dispatch({\n            type: 'DRAW_DATA_UPDATE_STATS',\n            payload: {\n              shouldCalculateStats: true\n            }\n          });\n        }\n      });\n    }\n  },\n  doDrawDataBulkDelete: () => ({\n    dispatch,\n    store\n  }) => {\n    const layer = store.selectDrawLayer();\n    const source = layer.getSource();\n    source.clear();\n  },\n  doDrawDataCalculateStats: () => ({\n    dispatch,\n    store\n  }) => {\n    dispatch({\n      type: \"DRAW_DATA_CALCULATE_STATS_STARTED\",\n      payload: {\n        shouldCalculateStats: false\n      }\n    });\n    const drawLayer = store.selectDrawLayer();\n    const collabLayer = store.selectCollabLayer();\n    if (!drawLayer || !collabLayer) return;\n    const drawSource = drawLayer.getSource();\n    const collabSource = collabLayer.getSource();\n    const drawFeatures = drawSource.getFeatures();\n    const collabFeatures = collabSource.getFeatures();\n    const drawProps = drawFeatures.map(feature => {\n      return feature.getProperties();\n    });\n    const collabProps = collabFeatures.map(feature => {\n      return feature.getProperties();\n    });\n    const allProps = [...drawProps, ...collabProps];\n    const stats = groupBy(allProps, \"created_by\");\n    dispatch({\n      type: \"DRAW_DATA_CALCULATE_STATS_FINISHED\",\n      payload: {\n        stats: stats\n      }\n    });\n  },\n  selectDrawDataStats: state => {\n    return state.drawData.stats;\n  },\n  reactDrawDataShouldCalculateStats: state => {\n    if (state.drawData.shouldCalculateStats) return {\n      actionCreator: 'doDrawDataCalculateStats'\n    };\n  },\n  reactDrawDataShouldFetch: state => {\n    if (state.drawData.shouldFetch) return {\n      actionCreator: 'doDrawDataFetch'\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Examples\\sharemap\\src\\app-bundles\\draw-data-bundle.js"],"names":["GeoJSON","groupBy","geoJSON","name","getReducer","initialData","shouldFetch","stats","shouldCalculateStats","state","type","payload","Object","assign","doDrawDataFetch","dispatch","store","apiGet","err","response","body","statusCode","console","error","layer","selectDrawLayer","source","getSource","features","readFeatures","addFeatures","doDrawDataHandleAdd","e","apiPost","feature","getId","styleSettings","selectDrawStyleSettings","set","Date","geoJsonFeature","writeFeature","JSON","parse","setId","id","doDrawDataHandleRemove","apiDelete","log","doDrawDataHandleChange","apiPut","doDrawDataBulkDelete","clear","doDrawDataCalculateStats","drawLayer","collabLayer","selectCollabLayer","drawSource","collabSource","drawFeatures","getFeatures","collabFeatures","drawProps","map","getProperties","collabProps","allProps","selectDrawDataStats","drawData","reactDrawDataShouldCalculateStats","actionCreator","reactDrawDataShouldFetch"],"mappings":"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","sourcesContent":["import GeoJSON from 'ol/format/GeoJSON';\r\nimport { groupBy } from 'lodash';\r\nconst geoJSON = new GeoJSON();\r\nexport default{\r\n    name: 'drawData',\r\n    getReducer: () =>{\r\n        const initialData = {\r\n            shouldFetch: false,\r\n            stats: null,\r\n            shouldCalculateStats: false\r\n        }\r\n        return (state = initialData, { type, payload}) => {\r\n            switch(type){\r\n                case 'DRAW_DATA_FETCH_STARTED':\r\n                case 'DRAW_DATA_FETCH_FINISHED':\r\n                case 'DRAW_DATA_CALCULATE_STATS_STARTED':\r\n                case 'DRAW_DATA_CALCULATE_STATS_FINISHED':\r\n                case 'DRAW_DATA_UPDATE_STATS':\r\n                    return Object.assign({}, state, payload)\r\n                case 'DRAW_INITIALIZE_FINISHED':\r\n                    return Object.assign({}, state, {\r\n                        shouldFetch: true\r\n                    })\r\n                default:\r\n                    return state;\r\n            }\r\n        }\r\n    },\r\n    doDrawDataFetch: () => ({ dispatch, store, apiGet}) => {\r\n        dispatch({type: 'DRAW_DATA_FETCH_STARTED', payload: { shouldFetch: false}})\r\n        apiGet('/mydata',(err,response,body)=>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                const layer = store.selectDrawLayer();\r\n                const source = layer.getSource();\r\n                const features = geoJSON.readFeatures(body);\r\n                source.addFeatures(features);\r\n            }\r\n        })\r\n        dispatch({type: 'DRAW_DATA_FETCH_FINISHED', payload: {\r\n            shouldCalculateStats: true\r\n        }})\r\n    },\r\n    doDrawDataHandleAdd:(e) => ({dispatch, store, apiPost}) => {\r\n        if(!e.feature.getId()){\r\n            const styleSettings = store.selectDrawStyleSettings();\r\n            e.feature.set('style',styleSettings,true);\r\n            e.feature.set('created_by', \"Master Will\",true)\r\n            e.feature.set('create_date', new Date(),true)\r\n            const geoJsonFeature = geoJSON.writeFeature(e.feature)\r\n            apiPost('/data', JSON.parse(geoJsonFeature), (err, response, body) =>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                e.feature.setId(body.id);\r\n                dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\r\n                    shouldCalculateStats: true\r\n                }})\r\n            }\r\n        })\r\n        }\r\n    },\r\n    doDrawDataHandleRemove:(e) => ({dispatch, store, apiDelete}) => {\r\n        const id = e.feature.getId();\r\n        if(id){\r\n            apiDelete(`/data/${id}`, (err, response, body) =>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                console.log(body)\r\n                dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\r\n                    shouldCalculateStats: true\r\n                }})\r\n            }\r\n        })\r\n        }\r\n    },\r\n    doDrawDataHandleChange:(e) => ({dispatch, store, apiPut}) => {\r\n        const id = e.feature.getId();\r\n        if(id){\r\n            const geoJsonFeature = geoJSON.writeFeature(e.feature)\r\n            apiPut(`/data/${id}`, JSON.parse(geoJsonFeature), (err, response, body) =>{\r\n            if(err || response.statusCode !== 200){\r\n                console.error('ERROR', response);\r\n            }else{\r\n                console.log(body);\r\n                dispatch({type: 'DRAW_DATA_UPDATE_STATS', payload: {\r\n                    shouldCalculateStats: true\r\n                }})\r\n            }\r\n        })\r\n        }\r\n    },\r\n    doDrawDataBulkDelete:()=>({dispatch, store}) =>{\r\n        const layer = store.selectDrawLayer();\r\n        const source = layer.getSource();\r\n        source.clear();\r\n    },\r\n    doDrawDataCalculateStats:()=>({dispatch, store}) =>{\r\n        dispatch({\r\n            type: \"DRAW_DATA_CALCULATE_STATS_STARTED\",\r\n            payload: {\r\n                shouldCalculateStats: false\r\n            }\r\n        })\r\n        const drawLayer = store.selectDrawLayer();\r\n        const collabLayer = store.selectCollabLayer();\r\n\r\n        if(!drawLayer || !collabLayer) return;\r\n        const drawSource = drawLayer.getSource();\r\n        const collabSource = collabLayer.getSource();\r\n        const drawFeatures = drawSource.getFeatures();\r\n        const collabFeatures = collabSource.getFeatures();\r\n\r\n        const drawProps = drawFeatures.map((feature) =>{\r\n            return feature.getProperties();\r\n        })\r\n        const collabProps = collabFeatures.map((feature) =>{\r\n            return feature.getProperties();\r\n        })\r\n        const allProps = [...drawProps, ...collabProps];\r\n        const stats = groupBy(allProps, \"created_by\");\r\n\r\n        dispatch({\r\n            type: \"DRAW_DATA_CALCULATE_STATS_FINISHED\",\r\n            payload: {\r\n                stats: stats\r\n            }\r\n        })\r\n    },\r\n    selectDrawDataStats: (state) =>{\r\n        return state.drawData.stats;\r\n    },\r\n    reactDrawDataShouldCalculateStats: (state) =>{\r\n        if(state.drawData.shouldCalculateStats) return { actionCreator: 'doDrawDataCalculateStats'}\r\n    },\r\n    reactDrawDataShouldFetch:(state) =>{\r\n        if(state.drawData.shouldFetch) return {actionCreator: 'doDrawDataFetch'}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}